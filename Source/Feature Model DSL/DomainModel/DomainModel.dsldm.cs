//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace ISpySoft.FeatureModelLanguage.DomainModel
{
	/// <summary>
	/// 
	/// </summary>
	[Microsoft.VisualStudio.Modeling.InheritBaseModel("2b131234-7959-458d-834f-2dc0769ce683")]
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.FeatureModelLanguage.DomainModel.FeatureModelLanguage.MetaModelGuidString, "FeatureModelLanguage")]
	public  partial class FeatureModelLanguage : Microsoft.VisualStudio.Modeling.SubStore
	{
		#region FeatureModelLanguage's Generated MetaClass Code
		/// <summary>
		/// MetaModel Guid String
		/// </summary>
		public const System.String MetaModelGuidString = "80ae475f-4729-4af9-b1b9-e22c0653e6f4";
		/// <summary>
		/// MetaModel Guid
		/// </summary>
		public static readonly System.Guid MetaModelGuid = new System.Guid(ISpySoft.FeatureModelLanguage.DomainModel.FeatureModelLanguage.MetaModelGuidString);
		/// <summary>
		/// Default Constructor called by the IMS -- do not call directly
		/// </summary>
		public FeatureModelLanguage() : base()
		{
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FeatureModelLanguage(Microsoft.VisualStudio.Modeling.Store store) : base(store.DefaultPartition, ISpySoft.FeatureModelLanguage.DomainModel.FeatureModelLanguage.MetaModelGuid)
		{
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FeatureModelLanguage(Microsoft.VisualStudio.Modeling.Partition partition) : base(partition, ISpySoft.FeatureModelLanguage.DomainModel.FeatureModelLanguage.MetaModelGuid)
		{
		}
		#endregion

	}
	#region FeatureModelLanguage's ResourceManager Code
	public  partial class FeatureModelLanguage
	{
		private static System.Resources.ResourceManager resourceManager = null;
		/// <summary>
		/// The base name of this models resources.
		/// </summary>
		public const string ResourceBaseName = "ISpySoft.FeatureModelLanguage.DomainModel.DomainModel.Resource";
		/// <summary>
		/// Returns the SubStore's ResourceManager. If the ResourceManager does not already exist, then it is created.
		/// </summary>
		public override System.Resources.ResourceManager ResourceManager
		{
			get
			{
				return ISpySoft.FeatureModelLanguage.DomainModel.FeatureModelLanguage.SingletonResourceManager;
			}
		}
		/// <summary>
		/// A internal object used for synchronization.
		/// </summary>
		private static object internalSyncObject;
		/// <summary>
		/// Gets the internal object used for synchronization.
		/// </summary>
		private static object InternalSyncObject 
		{
			get 
			{
				if (internalSyncObject == null) 
				{
					object o = new object();
					System.Threading.Interlocked.CompareExchange(ref internalSyncObject, o, null);
				}
				return internalSyncObject;
			}
		}
		/// <summary>
		/// Gets the Singleton ResourceManager for this SubStore
		/// </summary>
		public static System.Resources.ResourceManager SingletonResourceManager
		{
			get
			{
				if (ISpySoft.FeatureModelLanguage.DomainModel.FeatureModelLanguage.resourceManager == null)
				{
					lock (ISpySoft.FeatureModelLanguage.DomainModel.FeatureModelLanguage.InternalSyncObject)
					{
						if (ISpySoft.FeatureModelLanguage.DomainModel.FeatureModelLanguage.resourceManager == null)
						{
							ISpySoft.FeatureModelLanguage.DomainModel.FeatureModelLanguage.resourceManager = new System.Resources.ResourceManager(ResourceBaseName, typeof(ISpySoft.FeatureModelLanguage.DomainModel.FeatureModelLanguage).Assembly);
						}
					}
				}
				return ISpySoft.FeatureModelLanguage.DomainModel.FeatureModelLanguage.resourceManager;
			}
		}
	}
	#endregion
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	public  class ActivityCopyClosure : Microsoft.VisualStudio.Modeling.IElementVisitorFilter
	{
		/// <summary>
		/// MetaRoles
		/// </summary>
		private System.Collections.Generic.Dictionary<System.Guid, System.Guid> metaRolesMember;
		/// <summary>
		/// Constructor
		/// </summary>
		public ActivityCopyClosure()
		{
			#region Initialize MetaData Table
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">MetaRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="metaRelationshipInfo">MetaRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual Microsoft.VisualStudio.Modeling.VisitorFilterResult ShouldVisitRelationship(Microsoft.VisualStudio.Modeling.ElementWalker walker, Microsoft.VisualStudio.Modeling.ModelElement sourceElement, Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleInfo, Microsoft.VisualStudio.Modeling.MetaRelationshipInfo metaRelationshipInfo, Microsoft.VisualStudio.Modeling.ElementLink targetRelationship)
		{
			return this.MetaRoles.ContainsKey(sourceRoleInfo.Id) ? Microsoft.VisualStudio.Modeling.VisitorFilterResult.Yes : Microsoft.VisualStudio.Modeling.VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetRoleInfo">MetaRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual Microsoft.VisualStudio.Modeling.VisitorFilterResult ShouldVisitRolePlayer(Microsoft.VisualStudio.Modeling.ElementWalker walker, Microsoft.VisualStudio.Modeling.ModelElement sourceElement, Microsoft.VisualStudio.Modeling.ElementLink elementLink, Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleInfo, Microsoft.VisualStudio.Modeling.ModelElement targetRolePlayer)
		{
			foreach (Microsoft.VisualStudio.Modeling.MetaRoleInfo metaRoleInfo in elementLink.MetaRelationship.MetaRoles)
			{
				if (metaRoleInfo != targetRoleInfo && this.MetaRoles.ContainsKey(metaRoleInfo.Id))
				{
					return Microsoft.VisualStudio.Modeling.VisitorFilterResult.Yes;
				}
			}
			return Microsoft.VisualStudio.Modeling.VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// MetaRoles
		/// </summary>
		private System.Collections.Generic.Dictionary<System.Guid, System.Guid> MetaRoles
		{
			get
			{
				if (this.metaRolesMember == null)
				{
					this.metaRolesMember = new System.Collections.Generic.Dictionary<System.Guid, System.Guid>();
				}
				return this.metaRolesMember;
			}
		}

	}
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	public  class ActivityRemoveClosure : Microsoft.VisualStudio.Modeling.IElementVisitorFilter
	{
		/// <summary>
		/// MetaRoles
		/// </summary>
		private System.Collections.Generic.Dictionary<System.Guid, System.Guid> metaRolesMember;
		/// <summary>
		/// Constructor
		/// </summary>
		public ActivityRemoveClosure()
		{
			#region Initialize MetaData Table
			MetaRoles.Add(ISpySoft.FeatureModelLanguage.DomainModel.ActivityGraphHasElements.ElementsMetaRoleGuid, ISpySoft.FeatureModelLanguage.DomainModel.ActivityGraphHasElements.ElementsMetaRoleGuid);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">MetaRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="metaRelationshipInfo">MetaRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual Microsoft.VisualStudio.Modeling.VisitorFilterResult ShouldVisitRelationship(Microsoft.VisualStudio.Modeling.ElementWalker walker, Microsoft.VisualStudio.Modeling.ModelElement sourceElement, Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleInfo, Microsoft.VisualStudio.Modeling.MetaRelationshipInfo metaRelationshipInfo, Microsoft.VisualStudio.Modeling.ElementLink targetRelationship)
		{
			return Microsoft.VisualStudio.Modeling.VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetRoleInfo">MetaRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual Microsoft.VisualStudio.Modeling.VisitorFilterResult ShouldVisitRolePlayer(Microsoft.VisualStudio.Modeling.ElementWalker walker, Microsoft.VisualStudio.Modeling.ModelElement sourceElement, Microsoft.VisualStudio.Modeling.ElementLink elementLink, Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleInfo, Microsoft.VisualStudio.Modeling.ModelElement targetRolePlayer)
		{
			return this.MetaRoles.ContainsKey(targetRoleInfo.Id) ? Microsoft.VisualStudio.Modeling.VisitorFilterResult.Yes : Microsoft.VisualStudio.Modeling.VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// MetaRoles
		/// </summary>
		private System.Collections.Generic.Dictionary<System.Guid, System.Guid> MetaRoles
		{
			get
			{
				if (this.metaRolesMember == null)
				{
					this.metaRolesMember = new System.Collections.Generic.Dictionary<System.Guid, System.Guid>();
				}
				return this.metaRolesMember;
			}
		}

	}
	/// <summary>
	/// 
	/// </summary>
	public  partial class FeatureModelLanguage : Microsoft.VisualStudio.Modeling.SubStore
	{
		#region FeatureModelLanguage's AllGeneratedMetaModelTypes Code
		/// <summary>
		/// Virtual method that returns a collection of all types for metamodel 
		/// </summary>
		protected sealed override System.Type[] AllGeneratedMetaModelTypes()
		{
			System.Type[] typeArray = new System.Type[]
			{
				typeof(ISpySoft.FeatureModelLanguage.DomainModel.FeatureModelLanguage),
				typeof(ISpySoft.FeatureModelLanguage.DomainModel.FeatureModel),
				typeof(ISpySoft.FeatureModelLanguage.DomainModel.FeatureModelElementFactoryCreator),
				typeof(ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature),
				typeof(ISpySoft.FeatureModelLanguage.DomainModel.Feature),
				typeof(ISpySoft.FeatureModelLanguage.DomainModel.FeatureElementFactoryCreator),
				typeof(ISpySoft.FeatureModelLanguage.DomainModel.RootFeature),
				typeof(ISpySoft.FeatureModelLanguage.DomainModel.RootFeatureElementFactoryCreator),
				typeof(ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet),
				typeof(ISpySoft.FeatureModelLanguage.DomainModel.FeatureSetElementFactoryCreator),
				typeof(ISpySoft.FeatureModelLanguage.DomainModel.ActivityGraphHasElements),
				typeof(ISpySoft.FeatureModelLanguage.DomainModel.ActivityGraphHasElementsElementFactoryCreator),
				typeof(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature),
				typeof(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureElementFactoryCreator),
				typeof(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet),
				typeof(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSetElementFactoryCreator),

			};
			return typeArray;
		}
		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public  partial class FeatureModelLanguage : Microsoft.VisualStudio.Modeling.SubStore
	{
		#region FeatureModelLanguage's GeneratedReflectedMetaAttributes Code
		/// <summary>
		/// Virtual method that returns a collection of all fields for all types in metamodel FeatureModelLanguage
		/// </summary>
		protected sealed override Microsoft.VisualStudio.Modeling.MetaFieldInfo[] GeneratedReflectedMetaAttributes()
		{
			Microsoft.VisualStudio.Modeling.MetaFieldInfo[] typeArray = new Microsoft.VisualStudio.Modeling.MetaFieldInfo[]
			{
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(ISpySoft.FeatureModelLanguage.DomainModel.Feature), "Kind", ISpySoft.FeatureModelLanguage.DomainModel.Feature.KindMetaAttributeGuid, typeof(ISpySoft.FeatureModelLanguage.DomainModel.Feature.FeatureKindFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(ISpySoft.FeatureModelLanguage.DomainModel.Feature), "Condition", ISpySoft.FeatureModelLanguage.DomainModel.Feature.ConditionMetaAttributeGuid, typeof(ISpySoft.FeatureModelLanguage.DomainModel.Feature.FeatureConditionFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(ISpySoft.FeatureModelLanguage.DomainModel.Feature), "Constraint", ISpySoft.FeatureModelLanguage.DomainModel.Feature.ConstraintMetaAttributeGuid, typeof(ISpySoft.FeatureModelLanguage.DomainModel.Feature.FeatureConstraintFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(ISpySoft.FeatureModelLanguage.DomainModel.Feature), "Requirements", ISpySoft.FeatureModelLanguage.DomainModel.Feature.RequirementsMetaAttributeGuid, typeof(ISpySoft.FeatureModelLanguage.DomainModel.Feature.FeatureRequirementsFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(ISpySoft.FeatureModelLanguage.DomainModel.RootFeature), "Condition", ISpySoft.FeatureModelLanguage.DomainModel.RootFeature.ConditionMetaAttributeGuid, typeof(ISpySoft.FeatureModelLanguage.DomainModel.RootFeature.RootFeatureConditionFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(ISpySoft.FeatureModelLanguage.DomainModel.RootFeature), "Constraint", ISpySoft.FeatureModelLanguage.DomainModel.RootFeature.ConstraintMetaAttributeGuid, typeof(ISpySoft.FeatureModelLanguage.DomainModel.RootFeature.RootFeatureConstraintFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(ISpySoft.FeatureModelLanguage.DomainModel.RootFeature), "Requirements", ISpySoft.FeatureModelLanguage.DomainModel.RootFeature.RequirementsMetaAttributeGuid, typeof(ISpySoft.FeatureModelLanguage.DomainModel.RootFeature.RootFeatureRequirementsFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet), "Min", ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet.MinMetaAttributeGuid, typeof(ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet.FeatureSetMinFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet), "Max", ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet.MaxMetaAttributeGuid, typeof(ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet.FeatureSetMaxFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature), "Guard", ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature.GuardMetaAttributeGuid, typeof(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature.RelationshipFeatureGuardFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet), "Guard", ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet.GuardMetaAttributeGuid, typeof(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet.RelationshipFeatureSetGuardFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet), "Event", ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet.EventMetaAttributeGuid, typeof(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet.RelationshipFeatureSetEventFieldHandler)),

			};
			return typeArray;
		}
		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public  partial class FeatureModelLanguage : Microsoft.VisualStudio.Modeling.SubStore
	{
		#region FeatureModelLanguage's GeneratedReflectedMetaRoleAttributes Code
		/// <summary>
		/// Virtual method that returns a collection of all fields for all types in metamodel FeatureModelLanguage
		/// </summary>
		protected sealed override Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo[] GeneratedReflectedMetaRoles()
		{
			Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo[] typeArray = new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo[]
			{
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(ISpySoft.FeatureModelLanguage.DomainModel.ActivityGraphHasElements), "Elements", ISpySoft.FeatureModelLanguage.DomainModel.ActivityGraphHasElements.ElementsMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(ISpySoft.FeatureModelLanguage.DomainModel.ActivityGraphHasElements), "FeatureModel", ISpySoft.FeatureModelLanguage.DomainModel.ActivityGraphHasElements.FeatureModelMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature), "TransitionTo", ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature.TransitionToMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature), "TransitionFrom", ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature.TransitionFromMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet), "ObjectTransitionFrom", ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet.ObjectTransitionFromMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet), "ObjectTransitionTo", ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet.ObjectTransitionToMetaRoleGuid),

			};
			return typeArray;
		}
		#endregion
	}
}
namespace ISpySoft.FeatureModelLanguage.DomainModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("80ae475f-4729-4af9-b1b9-e22c0653e6f4")]
	[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.FeatureModelLanguage.DomainModel.FeatureModel.MetaClassGuidString, "FeatureModel")]
	public  partial class FeatureModel : Microsoft.VisualStudio.Modeling.NamedElement
	{
		#region FeatureModel's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "c4464c49-a8fa-4fb0-bc25-bb0ba770b788";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(ISpySoft.FeatureModelLanguage.DomainModel.FeatureModel.MetaClassGuidString);
		#endregion

		#region Elements's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeatureMoveableCollection Elements
		{
			get { return new ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeatureMoveableCollection(this, ISpySoft.FeatureModelLanguage.DomainModel.ActivityGraphHasElements.FeatureModelMetaRoleGuid, ISpySoft.FeatureModelLanguage.DomainModel.ActivityGraphHasElements.ElementsMetaRoleGuid); }
		}
		#endregion
	}
	#region FeatureModel's Generated Constructor Code
	public  partial class FeatureModel
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FeatureModel(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FeatureModel CreateFeatureModel(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateFeatureModel(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FeatureModel CreateAndInitializeFeatureModel(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFeatureModel(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FeatureModel(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FeatureModel CreateFeatureModel(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (FeatureModel)partition.ElementFactory.CreateElement(typeof(FeatureModel));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FeatureModel CreateAndInitializeFeatureModel(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FeatureModel)partition.ElementFactory.CreateElement(typeof(FeatureModel), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FeatureModel
	/// <summary>
	/// FeatureModel Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(ISpySoft.FeatureModelLanguage.DomainModel.FeatureModel))]
	public sealed class FeatureModelElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FeatureModelElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new ISpySoft.FeatureModelLanguage.DomainModel.FeatureModel( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FeatureModelElementFactoryCreator Instance
		{
			get
			{
				return new FeatureModelElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace ISpySoft.FeatureModelLanguage.DomainModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("80ae475f-4729-4af9-b1b9-e22c0653e6f4")]
	[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature.MetaClassGuidString, "AbstractFeature")]
	public abstract partial class AbstractFeature : Microsoft.VisualStudio.Modeling.NamedElement
	{
		#region AbstractFeature's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "80f728cc-dd2d-4d9f-a557-0af2f737917a";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature.MetaClassGuidString);
		#endregion

		#region FeatureModel's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public ISpySoft.FeatureModelLanguage.DomainModel.FeatureModel FeatureModel
		{
			get
			{
				return this.GetCounterpartRolePlayer(ISpySoft.FeatureModelLanguage.DomainModel.ActivityGraphHasElements.ElementsMetaRoleGuid, ISpySoft.FeatureModelLanguage.DomainModel.ActivityGraphHasElements.FeatureModelMetaRoleGuid, false) as ISpySoft.FeatureModelLanguage.DomainModel.FeatureModel;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(ISpySoft.FeatureModelLanguage.DomainModel.ActivityGraphHasElements.ElementsMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(ISpySoft.FeatureModelLanguage.DomainModel.ActivityGraphHasElements.FeatureModelMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							ISpySoft.FeatureModelLanguage.DomainModel.FeatureModel counterpart = link.GetRolePlayer(roleInfo) as ISpySoft.FeatureModelLanguage.DomainModel.FeatureModel;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(ISpySoft.FeatureModelLanguage.DomainModel.ActivityGraphHasElements.FeatureModelMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(ISpySoft.FeatureModelLanguage.DomainModel.ActivityGraphHasElements.ElementsMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(ISpySoft.FeatureModelLanguage.DomainModel.ActivityGraphHasElements), newRoles);
				}
			}
		}
		#endregion
		#region TransitionFrom's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeatureMoveableCollection TransitionFrom
		{
			get { return new ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeatureMoveableCollection(this, ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature.TransitionToMetaRoleGuid, ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature.TransitionFromMetaRoleGuid); }
		}
		#endregion
		#region TransitionTo's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeatureMoveableCollection TransitionTo
		{
			get { return new ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeatureMoveableCollection(this, ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature.TransitionFromMetaRoleGuid, ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature.TransitionToMetaRoleGuid); }
		}
		#endregion
		#region ObjectTransitionTo's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeatureMoveableCollection ObjectTransitionTo
		{
			get { return new ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeatureMoveableCollection(this, ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet.ObjectTransitionFromMetaRoleGuid, ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet.ObjectTransitionToMetaRoleGuid); }
		}
		#endregion
		#region ObjectTransitionFrom's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeatureMoveableCollection ObjectTransitionFrom
		{
			get { return new ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeatureMoveableCollection(this, ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet.ObjectTransitionToMetaRoleGuid, ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet.ObjectTransitionFromMetaRoleGuid); }
		}
		#endregion
	}
	#region Collection Classes for AbstractFeature
	/// <summary>
	/// ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class AbstractFeatureMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public AbstractFeatureMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature) && !value.GetType().IsSubclassOf(typeof(ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature) && !value.GetType().IsSubclassOf(typeof(ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature) && !value.GetType().IsSubclassOf(typeof(ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature) && !value.GetType().IsSubclassOf(typeof(ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature) && !value.GetType().IsSubclassOf(typeof(ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature) && !value.GetType().IsSubclassOf(typeof(ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature) && !rolePlayer.GetType().IsSubclassOf(typeof(ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature) && !rolePlayer.GetType().IsSubclassOf(typeof(ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature at that index</returns>
		public ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature this[System.Int32 index]
		{
			get { return (ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature to insert into the list</param>
		public void Insert(System.Int32 index, ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature to remove from the list</param>
		public void Remove(ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region AbstractFeature's Generated Constructor Code
	public abstract partial class AbstractFeature
	{
		/// <summary>
		/// Constructor
		/// </summary>
		protected AbstractFeature(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
	}
	#endregion
}
namespace ISpySoft.FeatureModelLanguage.DomainModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("80ae475f-4729-4af9-b1b9-e22c0653e6f4")]
	[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.FeatureModelLanguage.DomainModel.Feature.MetaClassGuidString, "Feature")]
	public  partial class Feature : ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature
	{
		#region Feature's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "0f632824-2b5b-4747-a24c-8b978c616b94";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(ISpySoft.FeatureModelLanguage.DomainModel.Feature.MetaClassGuidString);
		#endregion

		#region Kind's Generated  Field Code
		#region Kind's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String KindMetaAttributeGuidString = "c3562450-db3a-45bf-8855-72645d6cb638";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid KindMetaAttributeGuid = new System.Guid(ISpySoft.FeatureModelLanguage.DomainModel.Feature.KindMetaAttributeGuidString);
		#endregion

		#region Kind's Generated Property Code

		private ISpySoft.FeatureModelLanguage.DomainModel.FeatureKind kindPropertyStorage = ISpySoft.FeatureModelLanguage.DomainModel.FeatureKind.Mandatory;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.EnumerationDomainAttribute(EnumerationType=typeof(ISpySoft.FeatureModelLanguage.DomainModel.FeatureKind),DefaultEnumerationValueName="Mandatory")]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(FeatureKindFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.FeatureModelLanguage.DomainModel.Feature.KindMetaAttributeGuidString, "Feature.Kind")]
		public  ISpySoft.FeatureModelLanguage.DomainModel.FeatureKind Kind
		{
			get
			{
				return kindPropertyStorage;
			}
		
			set
			{
				featureKindFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region FeatureKindFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Feature.Kind field
		/// </summary>
		private static FeatureKindFieldHandler	featureKindFieldHandler	= FeatureKindFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Feature.Kind
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class FeatureKindFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<ISpySoft.FeatureModelLanguage.DomainModel.Feature,ISpySoft.FeatureModelLanguage.DomainModel.FeatureKind>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private FeatureKindFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Feature.Kind field handler
			/// </summary>
			/// <value>FeatureKindFieldHandler</value>
			public static FeatureKindFieldHandler Instance
			{
				get
				{
					if (ISpySoft.FeatureModelLanguage.DomainModel.Feature.featureKindFieldHandler != null)
					{
						return ISpySoft.FeatureModelLanguage.DomainModel.Feature.featureKindFieldHandler;
					}
					else
					{
						// The static constructor in Feature will assign this value to
						// ISpySoft.FeatureModelLanguage.DomainModel.Feature.featureKindFieldHandler, so just instantiate one and return it
						return new FeatureKindFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Feature.Kind field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return ISpySoft.FeatureModelLanguage.DomainModel.Feature.KindMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the Feature</param>
			protected sealed override ISpySoft.FeatureModelLanguage.DomainModel.FeatureKind GetValue(ISpySoft.FeatureModelLanguage.DomainModel.Feature element)
			{
				return element.kindPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(ISpySoft.FeatureModelLanguage.DomainModel.Feature element, ISpySoft.FeatureModelLanguage.DomainModel.FeatureKind value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref ISpySoft.FeatureModelLanguage.DomainModel.FeatureKind oldValue)
			{
				oldValue = element.kindPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.kindPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region Condition's Generated  Field Code
		#region Condition's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ConditionMetaAttributeGuidString = "8fbbc919-ab7b-41de-abae-f87fa2c21140";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ConditionMetaAttributeGuid = new System.Guid(ISpySoft.FeatureModelLanguage.DomainModel.Feature.ConditionMetaAttributeGuidString);
		#endregion

		#region Condition's Generated Property Code

		private System.String conditionPropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(FeatureConditionFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.FeatureModelLanguage.DomainModel.Feature.ConditionMetaAttributeGuidString, "Feature.Condition")]
		public  System.String Condition
		{
			get
			{
				return conditionPropertyStorage;
			}
		
			set
			{
				featureConditionFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region FeatureConditionFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Feature.Condition field
		/// </summary>
		private static FeatureConditionFieldHandler	featureConditionFieldHandler	= FeatureConditionFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Feature.Condition
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class FeatureConditionFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<ISpySoft.FeatureModelLanguage.DomainModel.Feature,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private FeatureConditionFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Feature.Condition field handler
			/// </summary>
			/// <value>FeatureConditionFieldHandler</value>
			public static FeatureConditionFieldHandler Instance
			{
				get
				{
					if (ISpySoft.FeatureModelLanguage.DomainModel.Feature.featureConditionFieldHandler != null)
					{
						return ISpySoft.FeatureModelLanguage.DomainModel.Feature.featureConditionFieldHandler;
					}
					else
					{
						// The static constructor in Feature will assign this value to
						// ISpySoft.FeatureModelLanguage.DomainModel.Feature.featureConditionFieldHandler, so just instantiate one and return it
						return new FeatureConditionFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Feature.Condition field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return ISpySoft.FeatureModelLanguage.DomainModel.Feature.ConditionMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the Feature</param>
			protected sealed override System.String GetValue(ISpySoft.FeatureModelLanguage.DomainModel.Feature element)
			{
				return element.conditionPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(ISpySoft.FeatureModelLanguage.DomainModel.Feature element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.conditionPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.conditionPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region Constraint's Generated  Field Code
		#region Constraint's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ConstraintMetaAttributeGuidString = "d996070d-5639-492d-973a-2868e0f2396b";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ConstraintMetaAttributeGuid = new System.Guid(ISpySoft.FeatureModelLanguage.DomainModel.Feature.ConstraintMetaAttributeGuidString);
		#endregion

		#region Constraint's Generated Property Code

		private System.String constraintPropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(FeatureConstraintFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.FeatureModelLanguage.DomainModel.Feature.ConstraintMetaAttributeGuidString, "Feature.Constraint")]
		public  System.String Constraint
		{
			get
			{
				return constraintPropertyStorage;
			}
		
			set
			{
				featureConstraintFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region FeatureConstraintFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Feature.Constraint field
		/// </summary>
		private static FeatureConstraintFieldHandler	featureConstraintFieldHandler	= FeatureConstraintFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Feature.Constraint
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class FeatureConstraintFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<ISpySoft.FeatureModelLanguage.DomainModel.Feature,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private FeatureConstraintFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Feature.Constraint field handler
			/// </summary>
			/// <value>FeatureConstraintFieldHandler</value>
			public static FeatureConstraintFieldHandler Instance
			{
				get
				{
					if (ISpySoft.FeatureModelLanguage.DomainModel.Feature.featureConstraintFieldHandler != null)
					{
						return ISpySoft.FeatureModelLanguage.DomainModel.Feature.featureConstraintFieldHandler;
					}
					else
					{
						// The static constructor in Feature will assign this value to
						// ISpySoft.FeatureModelLanguage.DomainModel.Feature.featureConstraintFieldHandler, so just instantiate one and return it
						return new FeatureConstraintFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Feature.Constraint field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return ISpySoft.FeatureModelLanguage.DomainModel.Feature.ConstraintMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the Feature</param>
			protected sealed override System.String GetValue(ISpySoft.FeatureModelLanguage.DomainModel.Feature element)
			{
				return element.constraintPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(ISpySoft.FeatureModelLanguage.DomainModel.Feature element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.constraintPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.constraintPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region Requirements's Generated  Field Code
		#region Requirements's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String RequirementsMetaAttributeGuidString = "ddf1ffcb-43c7-486b-8f08-9a841495ff38";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid RequirementsMetaAttributeGuid = new System.Guid(ISpySoft.FeatureModelLanguage.DomainModel.Feature.RequirementsMetaAttributeGuidString);
		#endregion

		#region Requirements's Generated Property Code

		private System.String requirementsPropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Editor( typeof(ISpySoft.FeatureModelLanguage.DomainModel.FeaturePropertiesUITypeEditor),typeof(System.Drawing.Design.UITypeEditor))]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(FeatureRequirementsFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.FeatureModelLanguage.DomainModel.Feature.RequirementsMetaAttributeGuidString, "Feature.Requirements")]
		public  System.String Requirements
		{
			get
			{
				return requirementsPropertyStorage;
			}
		
			set
			{
				featureRequirementsFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region FeatureRequirementsFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Feature.Requirements field
		/// </summary>
		private static FeatureRequirementsFieldHandler	featureRequirementsFieldHandler	= FeatureRequirementsFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Feature.Requirements
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class FeatureRequirementsFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<ISpySoft.FeatureModelLanguage.DomainModel.Feature,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private FeatureRequirementsFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Feature.Requirements field handler
			/// </summary>
			/// <value>FeatureRequirementsFieldHandler</value>
			public static FeatureRequirementsFieldHandler Instance
			{
				get
				{
					if (ISpySoft.FeatureModelLanguage.DomainModel.Feature.featureRequirementsFieldHandler != null)
					{
						return ISpySoft.FeatureModelLanguage.DomainModel.Feature.featureRequirementsFieldHandler;
					}
					else
					{
						// The static constructor in Feature will assign this value to
						// ISpySoft.FeatureModelLanguage.DomainModel.Feature.featureRequirementsFieldHandler, so just instantiate one and return it
						return new FeatureRequirementsFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Feature.Requirements field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return ISpySoft.FeatureModelLanguage.DomainModel.Feature.RequirementsMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the Feature</param>
			protected sealed override System.String GetValue(ISpySoft.FeatureModelLanguage.DomainModel.Feature element)
			{
				return element.requirementsPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(ISpySoft.FeatureModelLanguage.DomainModel.Feature element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.requirementsPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.requirementsPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
	}
	#region Feature's Generated Constructor Code
	public  partial class Feature
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public Feature(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Feature CreateFeature(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateFeature(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Feature CreateAndInitializeFeature(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFeature(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public Feature(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Feature CreateFeature(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (Feature)partition.ElementFactory.CreateElement(typeof(Feature));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Feature CreateAndInitializeFeature(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (Feature)partition.ElementFactory.CreateElement(typeof(Feature), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for Feature
	/// <summary>
	/// Feature Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(ISpySoft.FeatureModelLanguage.DomainModel.Feature))]
	public sealed class FeatureElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FeatureElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new ISpySoft.FeatureModelLanguage.DomainModel.Feature( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FeatureElementFactoryCreator Instance
		{
			get
			{
				return new FeatureElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace ISpySoft.FeatureModelLanguage.DomainModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("80ae475f-4729-4af9-b1b9-e22c0653e6f4")]
	[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.FeatureModelLanguage.DomainModel.RootFeature.MetaClassGuidString, "RootFeature")]
	public  partial class RootFeature : ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature
	{
		#region RootFeature's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "55176203-e535-445e-8e30-7c43314bdc6e";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(ISpySoft.FeatureModelLanguage.DomainModel.RootFeature.MetaClassGuidString);
		#endregion

		#region Condition's Generated  Field Code
		#region Condition's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ConditionMetaAttributeGuidString = "27827ad1-3849-4dac-a16b-e60b76e117d4";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ConditionMetaAttributeGuid = new System.Guid(ISpySoft.FeatureModelLanguage.DomainModel.RootFeature.ConditionMetaAttributeGuidString);
		#endregion

		#region Condition's Generated Property Code

		private System.String conditionPropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(RootFeatureConditionFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.FeatureModelLanguage.DomainModel.RootFeature.ConditionMetaAttributeGuidString, "RootFeature.Condition")]
		public  System.String Condition
		{
			get
			{
				return conditionPropertyStorage;
			}
		
			set
			{
				rootFeatureConditionFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region RootFeatureConditionFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for RootFeature.Condition field
		/// </summary>
		private static RootFeatureConditionFieldHandler	rootFeatureConditionFieldHandler	= RootFeatureConditionFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for RootFeature.Condition
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class RootFeatureConditionFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<ISpySoft.FeatureModelLanguage.DomainModel.RootFeature,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private RootFeatureConditionFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the RootFeature.Condition field handler
			/// </summary>
			/// <value>RootFeatureConditionFieldHandler</value>
			public static RootFeatureConditionFieldHandler Instance
			{
				get
				{
					if (ISpySoft.FeatureModelLanguage.DomainModel.RootFeature.rootFeatureConditionFieldHandler != null)
					{
						return ISpySoft.FeatureModelLanguage.DomainModel.RootFeature.rootFeatureConditionFieldHandler;
					}
					else
					{
						// The static constructor in RootFeature will assign this value to
						// ISpySoft.FeatureModelLanguage.DomainModel.RootFeature.rootFeatureConditionFieldHandler, so just instantiate one and return it
						return new RootFeatureConditionFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the RootFeature.Condition field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return ISpySoft.FeatureModelLanguage.DomainModel.RootFeature.ConditionMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the RootFeature</param>
			protected sealed override System.String GetValue(ISpySoft.FeatureModelLanguage.DomainModel.RootFeature element)
			{
				return element.conditionPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(ISpySoft.FeatureModelLanguage.DomainModel.RootFeature element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.conditionPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.conditionPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region Constraint's Generated  Field Code
		#region Constraint's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String ConstraintMetaAttributeGuidString = "5a76e4b8-260e-4b4d-b0bc-9121c8495335";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid ConstraintMetaAttributeGuid = new System.Guid(ISpySoft.FeatureModelLanguage.DomainModel.RootFeature.ConstraintMetaAttributeGuidString);
		#endregion

		#region Constraint's Generated Property Code

		private System.String constraintPropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(RootFeatureConstraintFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.FeatureModelLanguage.DomainModel.RootFeature.ConstraintMetaAttributeGuidString, "RootFeature.Constraint")]
		public  System.String Constraint
		{
			get
			{
				return constraintPropertyStorage;
			}
		
			set
			{
				rootFeatureConstraintFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region RootFeatureConstraintFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for RootFeature.Constraint field
		/// </summary>
		private static RootFeatureConstraintFieldHandler	rootFeatureConstraintFieldHandler	= RootFeatureConstraintFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for RootFeature.Constraint
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class RootFeatureConstraintFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<ISpySoft.FeatureModelLanguage.DomainModel.RootFeature,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private RootFeatureConstraintFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the RootFeature.Constraint field handler
			/// </summary>
			/// <value>RootFeatureConstraintFieldHandler</value>
			public static RootFeatureConstraintFieldHandler Instance
			{
				get
				{
					if (ISpySoft.FeatureModelLanguage.DomainModel.RootFeature.rootFeatureConstraintFieldHandler != null)
					{
						return ISpySoft.FeatureModelLanguage.DomainModel.RootFeature.rootFeatureConstraintFieldHandler;
					}
					else
					{
						// The static constructor in RootFeature will assign this value to
						// ISpySoft.FeatureModelLanguage.DomainModel.RootFeature.rootFeatureConstraintFieldHandler, so just instantiate one and return it
						return new RootFeatureConstraintFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the RootFeature.Constraint field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return ISpySoft.FeatureModelLanguage.DomainModel.RootFeature.ConstraintMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the RootFeature</param>
			protected sealed override System.String GetValue(ISpySoft.FeatureModelLanguage.DomainModel.RootFeature element)
			{
				return element.constraintPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(ISpySoft.FeatureModelLanguage.DomainModel.RootFeature element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.constraintPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.constraintPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region Requirements's Generated  Field Code
		#region Requirements's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String RequirementsMetaAttributeGuidString = "e5ee11c7-3171-4b55-8337-815b7f8949cf";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid RequirementsMetaAttributeGuid = new System.Guid(ISpySoft.FeatureModelLanguage.DomainModel.RootFeature.RequirementsMetaAttributeGuidString);
		#endregion

		#region Requirements's Generated Property Code

		private System.String requirementsPropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.Editor( typeof(ISpySoft.FeatureModelLanguage.DomainModel.RootFeaturePropertiesUITypeEditor),typeof(System.Drawing.Design.UITypeEditor))]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(RootFeatureRequirementsFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.FeatureModelLanguage.DomainModel.RootFeature.RequirementsMetaAttributeGuidString, "RootFeature.Requirements")]
		public  System.String Requirements
		{
			get
			{
				return requirementsPropertyStorage;
			}
		
			set
			{
				rootFeatureRequirementsFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region RootFeatureRequirementsFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for RootFeature.Requirements field
		/// </summary>
		private static RootFeatureRequirementsFieldHandler	rootFeatureRequirementsFieldHandler	= RootFeatureRequirementsFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for RootFeature.Requirements
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class RootFeatureRequirementsFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<ISpySoft.FeatureModelLanguage.DomainModel.RootFeature,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private RootFeatureRequirementsFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the RootFeature.Requirements field handler
			/// </summary>
			/// <value>RootFeatureRequirementsFieldHandler</value>
			public static RootFeatureRequirementsFieldHandler Instance
			{
				get
				{
					if (ISpySoft.FeatureModelLanguage.DomainModel.RootFeature.rootFeatureRequirementsFieldHandler != null)
					{
						return ISpySoft.FeatureModelLanguage.DomainModel.RootFeature.rootFeatureRequirementsFieldHandler;
					}
					else
					{
						// The static constructor in RootFeature will assign this value to
						// ISpySoft.FeatureModelLanguage.DomainModel.RootFeature.rootFeatureRequirementsFieldHandler, so just instantiate one and return it
						return new RootFeatureRequirementsFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the RootFeature.Requirements field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return ISpySoft.FeatureModelLanguage.DomainModel.RootFeature.RequirementsMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the RootFeature</param>
			protected sealed override System.String GetValue(ISpySoft.FeatureModelLanguage.DomainModel.RootFeature element)
			{
				return element.requirementsPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(ISpySoft.FeatureModelLanguage.DomainModel.RootFeature element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.requirementsPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.requirementsPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
	}
	#region RootFeature's Generated Constructor Code
	public  partial class RootFeature
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RootFeature(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RootFeature CreateRootFeature(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateRootFeature(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RootFeature CreateAndInitializeRootFeature(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeRootFeature(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public RootFeature(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RootFeature CreateRootFeature(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (RootFeature)partition.ElementFactory.CreateElement(typeof(RootFeature));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RootFeature CreateAndInitializeRootFeature(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (RootFeature)partition.ElementFactory.CreateElement(typeof(RootFeature), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for RootFeature
	/// <summary>
	/// RootFeature Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(ISpySoft.FeatureModelLanguage.DomainModel.RootFeature))]
	public sealed class RootFeatureElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RootFeatureElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new ISpySoft.FeatureModelLanguage.DomainModel.RootFeature( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static RootFeatureElementFactoryCreator Instance
		{
			get
			{
				return new RootFeatureElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace ISpySoft.FeatureModelLanguage.DomainModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("80ae475f-4729-4af9-b1b9-e22c0653e6f4")]
	[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet.MetaClassGuidString, "FeatureSet")]
	public  partial class FeatureSet : ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature
	{
		#region FeatureSet's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "3591c484-ba80-43bd-a8bb-92559a307779";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet.MetaClassGuidString);
		#endregion

		#region Min's Generated  Field Code
		#region Min's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String MinMetaAttributeGuidString = "2265a830-2924-42a2-a073-e36fc6ca03b6";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid MinMetaAttributeGuid = new System.Guid(ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet.MinMetaAttributeGuidString);
		#endregion

		#region Min's Generated Property Code

		private System.String minPropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(FeatureSetMinFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet.MinMetaAttributeGuidString, "FeatureSet.Min")]
		public  System.String Min
		{
			get
			{
				return minPropertyStorage;
			}
		
			set
			{
				featureSetMinFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region FeatureSetMinFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for FeatureSet.Min field
		/// </summary>
		private static FeatureSetMinFieldHandler	featureSetMinFieldHandler	= FeatureSetMinFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for FeatureSet.Min
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class FeatureSetMinFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private FeatureSetMinFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the FeatureSet.Min field handler
			/// </summary>
			/// <value>FeatureSetMinFieldHandler</value>
			public static FeatureSetMinFieldHandler Instance
			{
				get
				{
					if (ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet.featureSetMinFieldHandler != null)
					{
						return ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet.featureSetMinFieldHandler;
					}
					else
					{
						// The static constructor in FeatureSet will assign this value to
						// ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet.featureSetMinFieldHandler, so just instantiate one and return it
						return new FeatureSetMinFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the FeatureSet.Min field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet.MinMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the FeatureSet</param>
			protected sealed override System.String GetValue(ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet element)
			{
				return element.minPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.minPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.minPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region Max's Generated  Field Code
		#region Max's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String MaxMetaAttributeGuidString = "f7e2bda1-2675-4069-bad6-981091cda7f0";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid MaxMetaAttributeGuid = new System.Guid(ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet.MaxMetaAttributeGuidString);
		#endregion

		#region Max's Generated Property Code

		private System.String maxPropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(FeatureSetMaxFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet.MaxMetaAttributeGuidString, "FeatureSet.Max")]
		public  System.String Max
		{
			get
			{
				return maxPropertyStorage;
			}
		
			set
			{
				featureSetMaxFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region FeatureSetMaxFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for FeatureSet.Max field
		/// </summary>
		private static FeatureSetMaxFieldHandler	featureSetMaxFieldHandler	= FeatureSetMaxFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for FeatureSet.Max
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class FeatureSetMaxFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private FeatureSetMaxFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the FeatureSet.Max field handler
			/// </summary>
			/// <value>FeatureSetMaxFieldHandler</value>
			public static FeatureSetMaxFieldHandler Instance
			{
				get
				{
					if (ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet.featureSetMaxFieldHandler != null)
					{
						return ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet.featureSetMaxFieldHandler;
					}
					else
					{
						// The static constructor in FeatureSet will assign this value to
						// ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet.featureSetMaxFieldHandler, so just instantiate one and return it
						return new FeatureSetMaxFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the FeatureSet.Max field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet.MaxMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the FeatureSet</param>
			protected sealed override System.String GetValue(ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet element)
			{
				return element.maxPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.maxPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.maxPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
	}
	#region FeatureSet's Generated Constructor Code
	public  partial class FeatureSet
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FeatureSet(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FeatureSet CreateFeatureSet(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateFeatureSet(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FeatureSet CreateAndInitializeFeatureSet(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeFeatureSet(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public FeatureSet(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FeatureSet CreateFeatureSet(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (FeatureSet)partition.ElementFactory.CreateElement(typeof(FeatureSet));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static FeatureSet CreateAndInitializeFeatureSet(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (FeatureSet)partition.ElementFactory.CreateElement(typeof(FeatureSet), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for FeatureSet
	/// <summary>
	/// FeatureSet Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet))]
	public sealed class FeatureSetElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public FeatureSetElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static FeatureSetElementFactoryCreator Instance
		{
			get
			{
				return new FeatureSetElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace ISpySoft.FeatureModelLanguage.DomainModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("80ae475f-4729-4af9-b1b9-e22c0653e6f4")]
	[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.FeatureModelLanguage.DomainModel.ActivityGraphHasElements.MetaRelationshipGuidString, "ActivityGraphHasElements")]
	public  partial class ActivityGraphHasElements : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ActivityGraphHasElements's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "d1c7ff3a-4bba-40ab-a896-b9dabe5dfa91";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(ISpySoft.FeatureModelLanguage.DomainModel.ActivityGraphHasElements.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ActivityGraphHasElements.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ActivityGraphHasElements.MetaClassGuid;
		#endregion

		#region Elements's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ElementsMetaRoleGuidString = "7305fa3f-8aa3-43e5-be13-1e8cc9ef06f2";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ElementsMetaRoleGuid = new System.Guid(ISpySoft.FeatureModelLanguage.DomainModel.ActivityGraphHasElements.ElementsMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=true, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.FeatureModelLanguage.DomainModel.ActivityGraphHasElements.ElementsMetaRoleGuidString, "ActivityGraphHasElements.Elements")]
		public  ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature Elements
		{
			get { return (ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature)this.GetRolePlayer(ElementsMetaRoleGuid); }
			set { this.SetRolePlayer(ElementsMetaRoleGuid, value); }
		}
		
		#endregion
		#region FeatureModel's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String FeatureModelMetaRoleGuidString = "3f9c004e-10d7-4307-b7e8-59b18a295285";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid FeatureModelMetaRoleGuid = new System.Guid(ISpySoft.FeatureModelLanguage.DomainModel.ActivityGraphHasElements.FeatureModelMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.FeatureModelLanguage.DomainModel.ActivityGraphHasElements.FeatureModelMetaRoleGuidString, "ActivityGraphHasElements.FeatureModel")]
		public  ISpySoft.FeatureModelLanguage.DomainModel.FeatureModel FeatureModel
		{
			get { return (ISpySoft.FeatureModelLanguage.DomainModel.FeatureModel)this.GetRolePlayer(FeatureModelMetaRoleGuid); }
			set { this.SetRolePlayer(FeatureModelMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ActivityGraphHasElements's Generated Constructor Code
	public  partial class ActivityGraphHasElements
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ActivityGraphHasElements(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ActivityGraphHasElements CreateActivityGraphHasElements(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateActivityGraphHasElements(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ActivityGraphHasElements CreateAndInitializeActivityGraphHasElements(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeActivityGraphHasElements(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ActivityGraphHasElements(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ActivityGraphHasElements CreateActivityGraphHasElements(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ActivityGraphHasElements)partition.ElementFactory.CreateElementLink(typeof(ActivityGraphHasElements), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ActivityGraphHasElements CreateAndInitializeActivityGraphHasElements(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ActivityGraphHasElements)partition.ElementFactory.CreateElementLink(typeof(ActivityGraphHasElements), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ActivityGraphHasElements
	/// <summary>
	/// ActivityGraphHasElements Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(ISpySoft.FeatureModelLanguage.DomainModel.ActivityGraphHasElements))]
	public sealed class ActivityGraphHasElementsElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ActivityGraphHasElementsElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new ISpySoft.FeatureModelLanguage.DomainModel.ActivityGraphHasElements( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ActivityGraphHasElementsElementFactoryCreator Instance
		{
			get
			{
				return new ActivityGraphHasElementsElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace ISpySoft.FeatureModelLanguage.DomainModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("80ae475f-4729-4af9-b1b9-e22c0653e6f4")]
	[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature.MetaRelationshipGuidString, "RelationshipFeature")]
	public  partial class RelationshipFeature : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region RelationshipFeature's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "e050dd63-bf41-432e-a2c5-43e476179017";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = RelationshipFeature.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = RelationshipFeature.MetaClassGuid;
		#endregion

		#region Guard's Generated  Field Code
		#region Guard's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String GuardMetaAttributeGuidString = "85fc32f4-ffe0-47b6-b9b7-494d260c4b36";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid GuardMetaAttributeGuid = new System.Guid(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature.GuardMetaAttributeGuidString);
		#endregion

		#region Guard's Generated Property Code

		private System.String guardPropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(RelationshipFeatureGuardFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature.GuardMetaAttributeGuidString, "RelationshipFeature.Guard")]
		public  System.String Guard
		{
			get
			{
				return guardPropertyStorage;
			}
		
			set
			{
				relationshipFeatureGuardFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region RelationshipFeatureGuardFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for RelationshipFeature.Guard field
		/// </summary>
		private static RelationshipFeatureGuardFieldHandler	relationshipFeatureGuardFieldHandler	= RelationshipFeatureGuardFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for RelationshipFeature.Guard
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class RelationshipFeatureGuardFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private RelationshipFeatureGuardFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the RelationshipFeature.Guard field handler
			/// </summary>
			/// <value>RelationshipFeatureGuardFieldHandler</value>
			public static RelationshipFeatureGuardFieldHandler Instance
			{
				get
				{
					if (ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature.relationshipFeatureGuardFieldHandler != null)
					{
						return ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature.relationshipFeatureGuardFieldHandler;
					}
					else
					{
						// The static constructor in RelationshipFeature will assign this value to
						// ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature.relationshipFeatureGuardFieldHandler, so just instantiate one and return it
						return new RelationshipFeatureGuardFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the RelationshipFeature.Guard field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature.GuardMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the RelationshipFeature</param>
			protected sealed override System.String GetValue(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature element)
			{
				return element.guardPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.guardPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.guardPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region TransitionTo's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String TransitionToMetaRoleGuidString = "d3cd75f5-927d-4418-9cb3-44186b68c94f";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid TransitionToMetaRoleGuid = new System.Guid(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature.TransitionToMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=true, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature.TransitionToMetaRoleGuidString, "RelationshipFeature.TransitionTo")]
		public  ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature TransitionTo
		{
			get { return (ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature)this.GetRolePlayer(TransitionToMetaRoleGuid); }
			set { this.SetRolePlayer(TransitionToMetaRoleGuid, value); }
		}
		
		#endregion
		#region TransitionFrom's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String TransitionFromMetaRoleGuidString = "a6fb5fc4-9bed-41f5-bd52-1d896a401f8c";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid TransitionFromMetaRoleGuid = new System.Guid(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature.TransitionFromMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=true, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature.TransitionFromMetaRoleGuidString, "RelationshipFeature.TransitionFrom")]
		public  ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature TransitionFrom
		{
			get { return (ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature)this.GetRolePlayer(TransitionFromMetaRoleGuid); }
			set { this.SetRolePlayer(TransitionFromMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region RelationshipFeature's Generated Constructor Code
	public  partial class RelationshipFeature
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RelationshipFeature(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RelationshipFeature CreateRelationshipFeature(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateRelationshipFeature(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RelationshipFeature CreateAndInitializeRelationshipFeature(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeRelationshipFeature(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public RelationshipFeature(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RelationshipFeature CreateRelationshipFeature(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (RelationshipFeature)partition.ElementFactory.CreateElementLink(typeof(RelationshipFeature), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RelationshipFeature CreateAndInitializeRelationshipFeature(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (RelationshipFeature)partition.ElementFactory.CreateElementLink(typeof(RelationshipFeature), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for RelationshipFeature
	/// <summary>
	/// RelationshipFeature Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature))]
	public sealed class RelationshipFeatureElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RelationshipFeatureElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static RelationshipFeatureElementFactoryCreator Instance
		{
			get
			{
				return new RelationshipFeatureElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace ISpySoft.FeatureModelLanguage.DomainModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("80ae475f-4729-4af9-b1b9-e22c0653e6f4")]
	[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet.MetaRelationshipGuidString, "RelationshipFeatureSet")]
	public  partial class RelationshipFeatureSet : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region RelationshipFeatureSet's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "abe207c7-e14a-4570-b04b-c97edca7f609";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = RelationshipFeatureSet.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = RelationshipFeatureSet.MetaClassGuid;
		#endregion

		#region Guard's Generated  Field Code
		#region Guard's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String GuardMetaAttributeGuidString = "ff902ae8-2088-426e-bc2f-bdbd6327a908";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid GuardMetaAttributeGuid = new System.Guid(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet.GuardMetaAttributeGuidString);
		#endregion

		#region Guard's Generated Property Code

		private System.String guardPropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(RelationshipFeatureSetGuardFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet.GuardMetaAttributeGuidString, "RelationshipFeatureSet.Guard")]
		public  System.String Guard
		{
			get
			{
				return guardPropertyStorage;
			}
		
			set
			{
				relationshipFeatureSetGuardFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region RelationshipFeatureSetGuardFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for RelationshipFeatureSet.Guard field
		/// </summary>
		private static RelationshipFeatureSetGuardFieldHandler	relationshipFeatureSetGuardFieldHandler	= RelationshipFeatureSetGuardFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for RelationshipFeatureSet.Guard
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class RelationshipFeatureSetGuardFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private RelationshipFeatureSetGuardFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the RelationshipFeatureSet.Guard field handler
			/// </summary>
			/// <value>RelationshipFeatureSetGuardFieldHandler</value>
			public static RelationshipFeatureSetGuardFieldHandler Instance
			{
				get
				{
					if (ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet.relationshipFeatureSetGuardFieldHandler != null)
					{
						return ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet.relationshipFeatureSetGuardFieldHandler;
					}
					else
					{
						// The static constructor in RelationshipFeatureSet will assign this value to
						// ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet.relationshipFeatureSetGuardFieldHandler, so just instantiate one and return it
						return new RelationshipFeatureSetGuardFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the RelationshipFeatureSet.Guard field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet.GuardMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the RelationshipFeatureSet</param>
			protected sealed override System.String GetValue(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet element)
			{
				return element.guardPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.guardPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.guardPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region Event's Generated  Field Code
		#region Event's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String EventMetaAttributeGuidString = "aae25b9e-e47b-4aec-bac8-b13f103467ba";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid EventMetaAttributeGuid = new System.Guid(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet.EventMetaAttributeGuidString);
		#endregion

		#region Event's Generated Property Code

		private System.String eventPropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(RelationshipFeatureSetEventFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet.EventMetaAttributeGuidString, "RelationshipFeatureSet.Event")]
		public  System.String Event
		{
			get
			{
				return eventPropertyStorage;
			}
		
			set
			{
				relationshipFeatureSetEventFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region RelationshipFeatureSetEventFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for RelationshipFeatureSet.Event field
		/// </summary>
		private static RelationshipFeatureSetEventFieldHandler	relationshipFeatureSetEventFieldHandler	= RelationshipFeatureSetEventFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for RelationshipFeatureSet.Event
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class RelationshipFeatureSetEventFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private RelationshipFeatureSetEventFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the RelationshipFeatureSet.Event field handler
			/// </summary>
			/// <value>RelationshipFeatureSetEventFieldHandler</value>
			public static RelationshipFeatureSetEventFieldHandler Instance
			{
				get
				{
					if (ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet.relationshipFeatureSetEventFieldHandler != null)
					{
						return ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet.relationshipFeatureSetEventFieldHandler;
					}
					else
					{
						// The static constructor in RelationshipFeatureSet will assign this value to
						// ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet.relationshipFeatureSetEventFieldHandler, so just instantiate one and return it
						return new RelationshipFeatureSetEventFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the RelationshipFeatureSet.Event field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet.EventMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the RelationshipFeatureSet</param>
			protected sealed override System.String GetValue(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet element)
			{
				return element.eventPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.eventPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.eventPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region ObjectTransitionFrom's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ObjectTransitionFromMetaRoleGuidString = "745b0795-4332-46ad-badf-60a9e583eb1a";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ObjectTransitionFromMetaRoleGuid = new System.Guid(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet.ObjectTransitionFromMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=true, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet.ObjectTransitionFromMetaRoleGuidString, "RelationshipFeatureSet.ObjectTransitionFrom")]
		public  ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature ObjectTransitionFrom
		{
			get { return (ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature)this.GetRolePlayer(ObjectTransitionFromMetaRoleGuid); }
			set { this.SetRolePlayer(ObjectTransitionFromMetaRoleGuid, value); }
		}
		
		#endregion
		#region ObjectTransitionTo's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ObjectTransitionToMetaRoleGuidString = "59333095-e3fb-448d-9194-94e6e29da1fc";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ObjectTransitionToMetaRoleGuid = new System.Guid(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet.ObjectTransitionToMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=true, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet.ObjectTransitionToMetaRoleGuidString, "RelationshipFeatureSet.ObjectTransitionTo")]
		public  ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature ObjectTransitionTo
		{
			get { return (ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature)this.GetRolePlayer(ObjectTransitionToMetaRoleGuid); }
			set { this.SetRolePlayer(ObjectTransitionToMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region RelationshipFeatureSet's Generated Constructor Code
	public  partial class RelationshipFeatureSet
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RelationshipFeatureSet(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RelationshipFeatureSet CreateRelationshipFeatureSet(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateRelationshipFeatureSet(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RelationshipFeatureSet CreateAndInitializeRelationshipFeatureSet(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeRelationshipFeatureSet(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public RelationshipFeatureSet(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RelationshipFeatureSet CreateRelationshipFeatureSet(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (RelationshipFeatureSet)partition.ElementFactory.CreateElementLink(typeof(RelationshipFeatureSet), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static RelationshipFeatureSet CreateAndInitializeRelationshipFeatureSet(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (RelationshipFeatureSet)partition.ElementFactory.CreateElementLink(typeof(RelationshipFeatureSet), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for RelationshipFeatureSet
	/// <summary>
	/// RelationshipFeatureSet Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet))]
	public sealed class RelationshipFeatureSetElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public RelationshipFeatureSetElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static RelationshipFeatureSetElementFactoryCreator Instance
		{
			get
			{
				return new RelationshipFeatureSetElementFactoryCreator();
			}
		}
	}
	#endregion

}


