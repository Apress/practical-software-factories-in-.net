<#
/***************************************************************************
         Copyright (c) Microsoft Corporation, All rights reserved.             
    This code sample is provided "AS IS" without warranty of any kind, 
    it is not recommended for use in a production environment.
***************************************************************************/

//Note: This was manually file was customized

#>
<#@ definition processor="DDDirectiveProcessor" requires="fileName='..\Designer.dsldd'" #>

<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#=this.Definition.Namespace#>
	{
	#region Using Directives
	using System;
	using System.Collections;
	using System.ComponentModel.Design;
	using System.Diagnostics;
	using System.Drawing;
	using System.Globalization;
	using System.Runtime.InteropServices;
	using System.Windows.Forms;
	using System.IO;			// for FileInfo, Path
	using Microsoft.VisualStudio.Modeling;
	using Microsoft.VisualStudio.Modeling.Validation;
	using Microsoft.VisualStudio.Modeling.Diagrams;
	using Microsoft.VisualStudio.EnterpriseTools.Shell;
	using Microsoft.VisualStudio.Shell;
	using System.Xml;
	#endregion

	
	internal static class CustomCommandIdList
    {
        public const uint cmdIdGenerateXmlFromModel = 0x400; // must==value in ctc
    }

	
	
	/// <summary>
	/// Commands supported by this designer
	/// </summary>
	internal class CommandSet : Microsoft.VisualStudio.Modeling.Utilities.CommandSet
	{
		#region Constructor
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="serviceProvider"></param>
		public CommandSet (IServiceProvider serviceProvider) : base(serviceProvider)
		{
		}
		#endregion

		/// <summary>
		/// Provide the menu commands that this command set handles
		/// </summary>
		/// <param name="commandList"></param>
		protected override void GetMenuCommands(IList commandList)
		{
			// Get the standard commands
			base.GetMenuCommands(commandList);

			// Add View Model Explorer command in the top-level menu.
			// Use a ContextBoundMenuCommand for this, because availability of the command is
			// based on whether or not the command context of our editor is active. 
			MenuCommand menuCommand = new CommandContextBoundMenuCommand(this.ServiceProvider, 
				new EventHandler(OnMenuViewModelExplorer), 
				new CommandID(GuidList.guid<#=this.Definition.Name#>CmdSet, (int)PackageCommandIdList.cmdIdViewExplorer),
				GuidList.guidEditorFactory);

			commandList.Add(menuCommand);
			
			MenuCommand Model2XMLMenuCommand = new CommandContextBoundMenuCommand(this.ServiceProvider, new EventHandler(OnCheckModelValidity), new CommandID(GuidList.guidFeatureModelLanguageCmdSet, (int)CustomCommandIdList.cmdIdGenerateXmlFromModel), GuidList.guidEditorFactory);
			commandList.Add(Model2XMLMenuCommand);
			
			
						
<# if ( this.Definition.Validation != null && this.Definition.Validation.Menu ) { #>
			// Add validation menu command
			menuCommand = new DynamicStatusMenuCommand(new EventHandler(OnStatusValidate), new EventHandler(OnMenuValidate), CommonModelingCommands.ValidateModel);
			commandList.Add(menuCommand);
			
			
			
			
			
<#
	}
#>
			
		}


		internal void OnCheckModelValidity(object sender, EventArgs e)
        {
            ValidationController controller = this.CurrentData.ValidationController;
            ValidationCategory category = ValidationCategory.Menu;

            bool isValid = controller.Validate(this.CurrentData.Store, category);

            bool errorsOccurred = false;

            foreach (ValidationMessage message in controller.ValidationMessages)
            {
                if (message.Type == ViolationType.Error)
                {
                    errorsOccurred = true;
                    break;
                }

            }

            if (errorsOccurred)
            {
                System.Windows.Forms.MessageBox.Show("Cannot generate XML from model: There were validation errors!", "Model Invalidity", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            else
            {
                Microsoft.VisualStudio.Modeling.Diagrams.Diagram diagram = this.CurrentView.CurrentDiagram;
                ISpySoft.FeatureModelLanguage.Designer.Custom.XmlFileGenerator xmlFileGenerator = new ISpySoft.FeatureModelLanguage.Designer.Custom.XmlFileGenerator();
                xmlFileGenerator.GenerateXmlFile(diagram);
            }

        } // OnCheckModelValidity
		
		
		
		
		
		
		
		
		
		
		
		internal void OnMenuGenerateXmlFromModel(object sender, EventArgs e)
		{
			Microsoft.VisualStudio.Modeling.Diagrams.Diagram diagram = this.CurrentView.CurrentDiagram;
			ISpySoft.FeatureModelLanguage.Designer.Custom.XmlFileGenerator xmlFileGenerator = new ISpySoft.FeatureModelLanguage.Designer.Custom.XmlFileGenerator();
			xmlFileGenerator.GenerateXmlFile(diagram);
		}



		void GetSubFeatures(ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature feature, ref XmlDocument xmldoc, XmlElement xmlele)
		{
			XmlElement subelement = null;

			if (feature.GetType() == typeof(ISpySoft.FeatureModelLanguage.DomainModel.Feature))
			{
				subelement = xmldoc.CreateElement("Feature");
				subelement.SetAttribute("name", feature.Name);
				xmlele.AppendChild(subelement);
				foreach (ModelElement element in feature.GetElementLinks())
				{
					if (element.GetType() == typeof(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature))
					{
						ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature relationshipFeature = (ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature)element;
						ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature childFeature = relationshipFeature.TransitionTo;
						if (childFeature != feature)
						{
							GetSubFeatures(childFeature, ref xmldoc, subelement);
						}

					}
					else if (element.GetType() == typeof(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet))
					{
						ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet relationshipFeatureSet = (ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet)element;
						ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature childFeature = relationshipFeatureSet.ObjectTransitionTo;
						if (childFeature != feature)
						{
							GetSubFeatures(childFeature, ref xmldoc, subelement);
						}
					}
				}

			}


			else if (feature.GetType() == typeof(ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet))
			{
				subelement = xmldoc.CreateElement("FeatureSet");
				subelement.SetAttribute("min", "");
				subelement.SetAttribute("max", "");
				xmlele.AppendChild(subelement);
				foreach (ModelElement element in feature.GetElementLinks())
				{
					if (element.GetType() == typeof(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature))
					{
						ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature relationshipFeature = (ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeature)element;
						ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature childFeature = relationshipFeature.TransitionTo;
						if (childFeature != feature)
						{
							GetSubFeatures(childFeature, ref xmldoc, subelement);
						}

					}
					else if (element.GetType() == typeof(ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet))
					{
						ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet relationshipFeatureSet = (ISpySoft.FeatureModelLanguage.DomainModel.RelationshipFeatureSet)element;
						ISpySoft.FeatureModelLanguage.DomainModel.AbstractFeature childFeature = relationshipFeatureSet.ObjectTransitionTo;
						if (childFeature != feature)
						{
							GetSubFeatures(childFeature, ref xmldoc, subelement);
						}

					}



				}


			}


		}
		
		
		
		
		/// <summary>
		/// Show the Model Explorer
		/// </summary>
		/// <param name="sender">The source of the event</param>
		/// <param name="e">The event parameters</param>
		internal void OnMenuViewModelExplorer (object sender, EventArgs e)
		{
			<#=this.Definition.Name#>ModelExplorer explorer = this.ModelExplorer;
			if ( explorer != null )
			{
				explorer.Show();
			}
		}

<# if ( this.Definition.Validation != null && this.Definition.Validation.Menu ) { #>

		/// <summary>
		/// Status event handler for validating the model
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		internal void OnStatusValidate(object sender, EventArgs e)
		{
			MenuCommand cmd = sender as MenuCommand;
			cmd.Enabled = cmd.Visible = true;
		}

		/// <summary>
		/// Handler for validating the model
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		internal void OnMenuValidate(object sender, EventArgs e)
		{
			if (this.CurrentData != null && this.CurrentData.Store != null)
			{
				ValidationCategory category = ValidationCategory.Menu;
#if DEBUG
				category |= ValidationCategory.Debug;
#endif
				this.CurrentData.ValidationController.Validate(this.CurrentData.Store, category);
			}
		}

<#
	}
#>

		/// <summary>
		/// Currently focused document
		/// </summary>
		internal <#=this.Definition.Name#>DocData CurrentData
		{
			get
			{
				return this.MonitorSelection.CurrentDocument as <#=this.Definition.Name#>DocData;
			}
		}

		/// <summary>
		/// Currently focused document view
		/// </summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
		internal <#=this.Definition.Name#>DocView CurrentView
		{
			get
			{
				return base.CurrentDocView as <#=this.Definition.Name#>DocView;
			}
		}

		/// <summary>
		/// Browser tool window.
		/// </summary>
		internal <#=this.Definition.Name#>ModelExplorer ModelExplorer
		{
			get
			{
				return base.ModelExplorerToolWindow as <#=this.Definition.Name#>ModelExplorer;
			}
		}

		/// <summary>
		/// Provide the concrete type that implements the model explorer in this designer
		/// </summary>
		/// <value>The model explorer's concrete type</value>
		protected override Type ModelExplorerType
		{
			get
			{
				return typeof(<#=this.Definition.Name#>ModelExplorer);
			}
		}
	}
}
