//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ISpySoft.FeatureModelLanguage.Designer
{
    #region Using directives

	using System;
	using System.Collections.Generic;
	using Microsoft.VisualStudio.Modeling;
	using System.Diagnostics;
	using Microsoft.VisualStudio.Modeling.Utilities;
	using System.Drawing;
	using Microsoft.VisualStudio.Modeling.Diagrams;

	#endregion
	/// <summary>
	/// Partial class for shape with some overrides
	/// </summary>
	public partial class FeatureSetShape 
	{    
		#region Static data
        private static string ResourceOrId(string id)
        {
			string text = ISpySoft.FeatureModelLanguage.Designer.Diagram.Designer_Resource.ResourceManager.GetString(id, ISpySoft.FeatureModelLanguage.Designer.Diagram.Designer_Resource.Culture);
			return text == null ? id : text;        		
        }
        private readonly static DecoratorDescription[] decoratorDescriptions = { 
        		
				new Microsoft.VisualStudio.Modeling.Utilities.TextShapeDecoratorDescription("Min", ShapeDecoratorPosition.OuterMiddleRight, ResourceOrId("MinDecorator")),
	    		
				new Microsoft.VisualStudio.Modeling.Utilities.TextShapeDecoratorDescription("Max", ShapeDecoratorPosition.OuterBottomRight, ResourceOrId("MaxDecorator")),
	    	    };
	    	    
    	private readonly static DecoratorMapping[] decoratorMappings = {
			new SimpleDecoratorMapping("Min", ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet.MinMetaAttributeGuidString),

			new SimpleDecoratorMapping("Max", ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet.MaxMetaAttributeGuidString),

		};

		#endregion
		        
		        
		#region Toolbox support
		/// <summary>
		/// Create a serialized prototype for FeatureSet to attach to the toolbox.
		/// </summary>
		/// <param name="toolboxItem"></param>
		/// <returns>The prototype</returns>
		public override ElementGroupPrototype InitializeToolboxItem(ModelingToolboxItem toolboxItem)
		{
			ElementGroup elementGroup = new ElementGroup(this.Store);
			ElementGroupPrototype proto = null;

			Debug.Assert(this.Store.TransactionManager.InTransaction, "Must be in transaction");

			ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet instance = ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet.CreateFeatureSet(this.Store);

			if (instance != null)
			{
				elementGroup.AddGraph(instance);

				proto = elementGroup.CreatePrototype(instance);
			}
			return proto;
		}
		#endregion

		#region Decorators
		public override DecoratorDescription[] GetDecoratorDescriptions()
		{
			return FeatureSetShape.decoratorDescriptions;
		}

		public override DecoratorMapping[] GetDecoratorMappings()
		{
			return FeatureSetShape.decoratorMappings;
		}
		#endregion

		#region Visual settings
		/// <summary>
		/// Provide the specific Image for this Shape class
		/// </summary>
		protected override Image Image
		{
			get
			{
				return ImageHelper.GetImage(EditorFactory.GetResource("FeatureSetImage"));
			}
		}		
		#endregion
    }
	/// <summary>
	/// Partial class for shape with some overrides
	/// </summary>
	public partial class FeatureShape 
	{    
		#region Static data
        private static string ResourceOrId(string id)
        {
			string text = ISpySoft.FeatureModelLanguage.Designer.Diagram.Designer_Resource.ResourceManager.GetString(id, ISpySoft.FeatureModelLanguage.Designer.Diagram.Designer_Resource.Culture);
			return text == null ? id : text;        		
        }
        private readonly static DecoratorDescription[] decoratorDescriptions = { 
        		
				new Microsoft.VisualStudio.Modeling.Utilities.TextShapeDecoratorDescription("Name", ShapeDecoratorPosition.InnerBottomCenter, ResourceOrId("FeatureShapeNameDecorator")),
	    				new Microsoft.VisualStudio.Modeling.Utilities.IconShapeDecoratorDescription("MandatoryIcon", ShapeDecoratorPosition.InnerTopCenter, ImageHelper.GetImage(EditorFactory.GetResource("MandatoryIconFile"))),
	    				new Microsoft.VisualStudio.Modeling.Utilities.IconShapeDecoratorDescription("OptionalIcon", ShapeDecoratorPosition.InnerTopCenter, ImageHelper.GetImage(EditorFactory.GetResource("OptionalIconFile"))),
	    	    };
	    	    
    	private readonly static DecoratorMapping[] decoratorMappings = {
			new SimpleDecoratorMapping("Name", Microsoft.VisualStudio.Modeling.NamedElement.NameMetaAttributeGuidString),

			new OneWayEnumerationDecoratorMapping("MandatoryIcon", ISpySoft.FeatureModelLanguage.DomainModel.Feature.KindMetaAttributeGuidString, new System.Enum[] { 
				ISpySoft.FeatureModelLanguage.DomainModel.FeatureKind.Mandatory,
				}),
			new OneWayEnumerationDecoratorMapping("OptionalIcon", ISpySoft.FeatureModelLanguage.DomainModel.Feature.KindMetaAttributeGuidString, new System.Enum[] { 
				ISpySoft.FeatureModelLanguage.DomainModel.FeatureKind.Optional,
				}),
		};

		#endregion
		        
		        
		#region Toolbox support
		/// <summary>
		/// Create a serialized prototype for Feature to attach to the toolbox.
		/// </summary>
		/// <param name="toolboxItem"></param>
		/// <returns>The prototype</returns>
		public override ElementGroupPrototype InitializeToolboxItem(ModelingToolboxItem toolboxItem)
		{
			ElementGroup elementGroup = new ElementGroup(this.Store);
			ElementGroupPrototype proto = null;

			Debug.Assert(this.Store.TransactionManager.InTransaction, "Must be in transaction");

			ISpySoft.FeatureModelLanguage.DomainModel.Feature instance = ISpySoft.FeatureModelLanguage.DomainModel.Feature.CreateFeature(this.Store);

			if (instance != null)
			{
				elementGroup.AddGraph(instance);

				proto = elementGroup.CreatePrototype(instance);
			}
			return proto;
		}
		#endregion

		#region Decorators
		public override DecoratorDescription[] GetDecoratorDescriptions()
		{
			return FeatureShape.decoratorDescriptions;
		}

		public override DecoratorMapping[] GetDecoratorMappings()
		{
			return FeatureShape.decoratorMappings;
		}
		#endregion

		#region Visual settings
		/// <summary>
		/// Provide the specific geometry for the shape
		/// </summary>
		/// <value></value>
		public override ShapeGeometry ShapeGeometry
		{
			get
			{
				return ShapeGeometries.Rectangle;
			}
		}		

		/// <summary>
		/// The initial size of the shape
		/// </summary>
		/// <value></value>
		public override Microsoft.VisualStudio.Modeling.Diagrams.SizeD DefaultSize
		{
			get { return new SizeD(0.7, 0.5); }
		}

		/// <summary>
		/// FillColorStorage
		/// </summary>
		/// <remarks>
		/// FillColor is a fixed property hence it has no backing store
		/// </remarks>
		[Variability(Variability.Fixed)]
		protected override Color FillColorStorage
		{
			get
			{
				return System.Drawing.Color.FromArgb(255, 170, 170, 255);
			}
			set
			{
				throw new InvalidOperationException();
			}
		}
		/// <summary>
		/// OutlineColorStorage
		/// </summary>
		/// <remarks>
		/// OutlineColor is a fixed property hence it has no backing store
		/// </remarks>
		[Variability(Variability.Fixed)]
		protected override Color OutlineColorStorage
		{
			get
			{
				return System.Drawing.Color.Black;
			}
			set
			{
				throw new InvalidOperationException();
			}
		}
		#endregion
    }
	/// <summary>
	/// Partial class for shape with some overrides
	/// </summary>
	public partial class RootFeatureShape 
	{    
		#region Static data
        private static string ResourceOrId(string id)
        {
			string text = ISpySoft.FeatureModelLanguage.Designer.Diagram.Designer_Resource.ResourceManager.GetString(id, ISpySoft.FeatureModelLanguage.Designer.Diagram.Designer_Resource.Culture);
			return text == null ? id : text;        		
        }
        private readonly static DecoratorDescription[] decoratorDescriptions = { 
        		
				new Microsoft.VisualStudio.Modeling.Utilities.TextShapeDecoratorDescription("Name", ShapeDecoratorPosition.Center, ResourceOrId("RootFeatureShapeNameDecorator")),
	    	    };
	    	    
    	private readonly static DecoratorMapping[] decoratorMappings = {
			new SimpleDecoratorMapping("Name", Microsoft.VisualStudio.Modeling.NamedElement.NameMetaAttributeGuidString),

		};

		#endregion
		        
		        
		#region Toolbox support
		/// <summary>
		/// Create a serialized prototype for RootFeature to attach to the toolbox.
		/// </summary>
		/// <param name="toolboxItem"></param>
		/// <returns>The prototype</returns>
		public override ElementGroupPrototype InitializeToolboxItem(ModelingToolboxItem toolboxItem)
		{
			ElementGroup elementGroup = new ElementGroup(this.Store);
			ElementGroupPrototype proto = null;

			Debug.Assert(this.Store.TransactionManager.InTransaction, "Must be in transaction");

			ISpySoft.FeatureModelLanguage.DomainModel.RootFeature instance = ISpySoft.FeatureModelLanguage.DomainModel.RootFeature.CreateRootFeature(this.Store);

			if (instance != null)
			{
				elementGroup.AddGraph(instance);

				proto = elementGroup.CreatePrototype(instance);
			}
			return proto;
		}
		#endregion

		#region Decorators
		public override DecoratorDescription[] GetDecoratorDescriptions()
		{
			return RootFeatureShape.decoratorDescriptions;
		}

		public override DecoratorMapping[] GetDecoratorMappings()
		{
			return RootFeatureShape.decoratorMappings;
		}
		#endregion

		#region Visual settings
		/// <summary>
		/// Provide the specific geometry for the shape
		/// </summary>
		/// <value></value>
		public override ShapeGeometry ShapeGeometry
		{
			get
			{
				return ShapeGeometries.Rectangle;
			}
		}		

		/// <summary>
		/// The initial size of the shape
		/// </summary>
		/// <value></value>
		public override Microsoft.VisualStudio.Modeling.Diagrams.SizeD DefaultSize
		{
			get { return new SizeD(0.7, 0.5); }
		}

		/// <summary>
		/// FillColorStorage
		/// </summary>
		/// <remarks>
		/// FillColor is a fixed property hence it has no backing store
		/// </remarks>
		[Variability(Variability.Fixed)]
		protected override Color FillColorStorage
		{
			get
			{
				return System.Drawing.Color.FromArgb(255, 255, 170, 170);
			}
			set
			{
				throw new InvalidOperationException();
			}
		}
		/// <summary>
		/// OutlineColorStorage
		/// </summary>
		/// <remarks>
		/// OutlineColor is a fixed property hence it has no backing store
		/// </remarks>
		[Variability(Variability.Fixed)]
		protected override Color OutlineColorStorage
		{
			get
			{
				return System.Drawing.Color.Black;
			}
			set
			{
				throw new InvalidOperationException();
			}
		}
		#endregion
    }
}

