<#@ definition processor="DDDirectiveProcessor" requires="fileName='..\Designer.dsldd'" #>
<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Drawing.dll" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Drawing" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
    
<# 
	// Set up a dictionary of Connector Mappings, 
	// which relate Connectors (i.e. links on the diagram) 
	// to CdlRoles (i.e. relation-ends within the concept model).
	Dictionary<Connector, ConnectorMap> mapMap = new Dictionary<Connector, ConnectorMap>();
	foreach ( DiagramMap diagramMap in this.Definition.Notation.DiagramMaps )
	{
		foreach ( ConnectorMap connectorMap in diagramMap.ConnectorMaps )
		{
			mapMap[connectorMap.Connector]=connectorMap;
		}
	}
	
	// Create a pair of classes (XXConnectAction and XXConnectionType) 
	// for each Connector defined in each Diagram.
    foreach ( Diagram diagram in this.Definition.Notation.Diagrams )
    {

	// Create a dictionary of all connectorTools (toolbox items 
	// for connector). The dictionary tells us if a connector
	// has a toolbox item defined for it or not. We only generate
	// MouseAction code for the connector if it has a toolbox
	// item specified.
	Dictionary<Connector, bool> connectorToolPresent = new Dictionary<Connector, bool>();
	foreach(ToolboxItem item in diagram.Toolbox.Items) 
	{
		ConnectorTool tool = item as ConnectorTool;
		if(tool != null && !connectorToolPresent.ContainsKey(tool.Connector))
		{
			connectorToolPresent[tool.Connector]=true;
		}
	}

        foreach (Connector connector in diagram.Connectors)
        {
			string connectorName = connector.Name;
      
			// We only generate the MouseAction if a toolbox
			// item for this connector is defined
			if(connectorToolPresent.ContainsKey(connector)) 
			{
       
       // All of the following code is created for each Connector
       // defined in each Diagram.
    #>
namespace <#=this.Definition.Namespace#>
{
	#region Using directives
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Microsoft.VisualStudio.EnterpriseTools.Shell;
	using Microsoft.VisualStudio.Modeling;
	using Microsoft.VisualStudio.Modeling.Utilities;
	using System.Windows.Forms;
	using Microsoft.VisualStudio.Modeling.Diagrams;
	#endregion

	///<summary>
	///The MouseAction that handles the gesture for creating a Connector.
	///</summary>
	public class <#=connectorName#>ConnectAction : ConnectorConnectAction
	{
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="diagram"></param>
		/// <param name="permitClick"></param>
		public <#=connectorName#>ConnectAction(Microsoft.VisualStudio.Modeling.Diagrams.Diagram diagram, bool permitClick): base(diagram, permitClick )
		{
		}

		/// <summary>
		/// Get the ConnectionType instance associated with this action when the source and target conditions are met
		/// </summary>
		/// <param name="sourceShapeElement"></param>
		/// <param name="targetShapeElement"></param>
		/// <returns></returns>
		protected override ShapeToShapeConnectionType GetConnectionType(ShapeElement sourceShapeElement, ShapeElement targetShapeElement)
		{
			return <#=connectorName#>ConnectionType.Instance;
		}
	}

	/// <summary>
	/// Singleton ConnectionType for creating the Connector between two Shapes.
	/// </summary>
	public partial class <#=connectorName#>ConnectionType : ShapeToShapeConnectionType
	{
		private static <#=connectorName#>ConnectionType instance;

		public <#=connectorName#>ConnectionType() : base()
		{
		}

		/// <summary>
		/// Get the types of shape that are valid as sources
		/// </summary>
		/// <value></value>
		public override IList<Type> SourceShapeTypes
		{
			get
			{
				List<Type> types = new List<Type>();
<#foreach ( Shape shape in connector.Source.PermittedShapes )
{#>
				types.Add(typeof(<#=this.Definition.Namespace#>.<#=shape.Name#>));
<#}#>				 
				return types.AsReadOnly();				 
			}
		}

		/// <summary>
		/// Get the types of shape that are valid as targets
		/// </summary>
		/// <value></value>
		public override IList<Type> TargetShapeTypes
		{
			get
			{
				List<Type> types = new List<Type>();
<#foreach ( Shape shape in connector.Target.PermittedShapes )
{#>
				types.Add(typeof(<#=this.Definition.Namespace#>.<#=shape.Name#>));
<#}#>				 
				return types.AsReadOnly();				 
			}
		}
	
		public static new <#=connectorName#>ConnectionType Instance
		{
			get
			{
				if (instance == null)
				{
					instance = new <#=connectorName#>ConnectionType();
				}
				return instance;
			}
		}
	
<#
	// We only generate code for creating a connection with the
	// mouse action if a connector-map is defined. If not,
	// the user will have to create a partial class and override
	// the methods manually
	ConnectorMap connectorMap = null;
	if ( mapMap.TryGetValue(connector, out connectorMap) )
	{
		RoleExpression sourceExpression = connectorMap.SourceMap.ModelNavigationExpression as RoleExpression;
		RoleExpression targetExpression = connectorMap.TargetMap.ModelNavigationExpression as RoleExpression;
		if ( sourceExpression != null && targetExpression != null )
		{
			string sourceName = sourceExpression.Role.Name;
			string targetName = targetExpression.Role.Name;
			string sourceNamespace = sourceExpression.Role.Type.Namespace;
			string targetNamespace = targetExpression.Role.Type.Namespace;
			string sourceType = sourceExpression.Role.Type.Name;
			string targetType = targetExpression.Role.Type.Name;

#>

		/// Return whether the instance is OK to be the source of a link, in its current state.
		/// </summary>
		/// <param name="shape"></param>
		/// <returns></returns>
		public override bool IsValidSourceInstance(ShapeElement shape)
		{
			if (!SourceShapeTypes.Contains(ConnectorConnectAction.TopLevelShape(shape).GetType())) return false;
			return base.IsValidSourceInstance(shape);
		}
		
		/// <summary>
		/// Return whether the instance is OK to be the source of a link, in its current state.
		/// </summary>
		/// <param name="modelElement"></param>
		/// <returns></returns>
		public override bool IsValidSourceInstance(ModelElement element)
		{
	<#
	// If the number of links allowed is unbounded, we can 
	// create another link
	if (targetExpression.Role.Max == 0) { 
	#>
			return true;
	<# } else { #>

			// Cast to target ModelElement subtype
			<#=sourceNamespace#>.<#=sourceType#>  sourceElement = element as <#=sourceNamespace#>.<#=sourceType#> ;
			if (sourceElement == null) return false;
		<#
		// If the number of links allowed is bounded but more than one,
		// then we allow this link if the number of links present is
		// less than the bound
		if (targetExpression.Role.IsMany) { 
		#>
			return sourceElement.<#=targetName#>.Count < <#=targetExpression.Role.Max#> ;
		<# 
		// If the number of links allowed is 1, we allow this link
		// if none already exist. 
		} else { 
		#>
			return sourceElement.<#=targetName#> == null;
	<# } } #>
		}	

		/// <summary>
		/// Whether the instance is OK to be the target of a link, in its current state.
		/// </summary>
		/// <param name="modelElement"></param>
		/// <returns></returns>
		public override bool IsValidTargetInstance(ModelElement element)
		{
		
	<#
	// If the number of links allowed is unbounded, we can 
	// create another link
	if (sourceExpression.Role.Max == 0) { 
	#>
			return true;
	<# } else { #>

			// Cast to target ModelElement subtype
			<#=targetNamespace#>.<#=targetType#>  targetElement = element as <#=targetNamespace#>.<#=targetType#> ;
			if (targetElement == null) return false;

		<#
		// If the number of links allowed is bounded but more than one,
		// then we allow this link if the number of links present is
		// less than the bound
		if (sourceExpression.Role.IsMany) { 
		#>
			return targetElement.<#=sourceName#>.Count < <#=sourceExpression.Role.Max#>;
		<# 
		// If the number of links allowed is 1, we allow this link
		// if none already exist. 
		} else { 
		#>
			return targetElement.<#=sourceName#> == null ;
	<# } } #>
		}

		/// <summary>
		/// Creates a relationship between <#=sourceName#> and <#=targetName#>
		/// </summary>
		/// <param name="source"><#=sourceName#> to start the relationship at</param>
		/// <param name="target"><#=targetName#> to end the relationship at</param>
		public override void CreateConnection(Shape sourceShape, Shape targetShape)
		{
			if (sourceShape == null)
			{
				throw new ArgumentNullException("sourceShape");
			}

			if (targetShape == null)
			{
				throw new ArgumentNullException("targetShape");
			}

			if (sourceShape != null && targetShape != null)
			{
				<#=sourceNamespace#>.<#=sourceType#> sourceElement = sourceShape.ModelElement as <#=sourceNamespace#>.<#=sourceType#>;
				<#=targetNamespace#>.<#=targetType#> targetElement = targetShape.ModelElement as <#=targetNamespace#>.<#=targetType#>;

				// Make MEL relationship - PEL relationship will be handled by ViewFixup mechanism
				if (sourceElement != null && targetElement != null)
				{
					<# if (sourceExpression.Role.IsMany) { #>
					    targetElement.<#=sourceName#>.Add(sourceElement);
					    
					    if (sourceElement.GetType() == typeof(ISpySoft.FeatureModelLanguage.DomainModel.FeatureSet))
						{
							foreach (System.ComponentModel.PropertyDescriptor property in targetElement.GetProperties())
							{
        						if (property.Name == "Kind")
								{
                					property.SetValue(property, ISpySoft.FeatureModelLanguage.DomainModel.FeatureKind.FeatureSetFeature);
								}
							}
						}
					    
					    
					<# } else { #>
					    targetElement.<#=sourceName#> = sourceElement;
					<# } #>
				}
			}
		}	
<#
		} // END if sourceRoleExpression and targetRoleExpression not equal to null
	} // END if connector map exists
#>		

	}
}
<#
		} // End if - check if connectorMap exists for connector
	} // End foreach - the per-connector loop
} // End foreach - the main per-notation loop
#>
