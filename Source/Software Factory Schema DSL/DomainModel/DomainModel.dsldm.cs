//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace ISpySoft.SFSchemaLanguage.DomainModel
{
	/// <summary>
	/// 
	/// </summary>
	[Microsoft.VisualStudio.Modeling.InheritBaseModel("2b131234-7959-458d-834f-2dc0769ce683")]
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.SFSchemaLanguage.DomainModel.SFSchemaLanguage.MetaModelGuidString, "SFSchemaLanguage")]
	public  partial class SFSchemaLanguage : Microsoft.VisualStudio.Modeling.SubStore
	{
		#region SFSchemaLanguage's Generated MetaClass Code
		/// <summary>
		/// MetaModel Guid String
		/// </summary>
		public const System.String MetaModelGuidString = "678d8d2e-fe22-4992-919e-f3b5d3bd7c99";
		/// <summary>
		/// MetaModel Guid
		/// </summary>
		public static readonly System.Guid MetaModelGuid = new System.Guid(ISpySoft.SFSchemaLanguage.DomainModel.SFSchemaLanguage.MetaModelGuidString);
		/// <summary>
		/// Default Constructor called by the IMS -- do not call directly
		/// </summary>
		public SFSchemaLanguage() : base()
		{
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SFSchemaLanguage(Microsoft.VisualStudio.Modeling.Store store) : base(store.DefaultPartition, ISpySoft.SFSchemaLanguage.DomainModel.SFSchemaLanguage.MetaModelGuid)
		{
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SFSchemaLanguage(Microsoft.VisualStudio.Modeling.Partition partition) : base(partition, ISpySoft.SFSchemaLanguage.DomainModel.SFSchemaLanguage.MetaModelGuid)
		{
		}
		#endregion

	}
	#region SFSchemaLanguage's ResourceManager Code
	public  partial class SFSchemaLanguage
	{
		private static System.Resources.ResourceManager resourceManager = null;
		/// <summary>
		/// The base name of this models resources.
		/// </summary>
		public const string ResourceBaseName = "ISpySoft.SFSchemaLanguage.DomainModel.DomainModel.Resource";
		/// <summary>
		/// Returns the SubStore's ResourceManager. If the ResourceManager does not already exist, then it is created.
		/// </summary>
		public override System.Resources.ResourceManager ResourceManager
		{
			get
			{
				return ISpySoft.SFSchemaLanguage.DomainModel.SFSchemaLanguage.SingletonResourceManager;
			}
		}
		/// <summary>
		/// A internal object used for synchronization.
		/// </summary>
		private static object internalSyncObject;
		/// <summary>
		/// Gets the internal object used for synchronization.
		/// </summary>
		private static object InternalSyncObject 
		{
			get 
			{
				if (internalSyncObject == null) 
				{
					object o = new object();
					System.Threading.Interlocked.CompareExchange(ref internalSyncObject, o, null);
				}
				return internalSyncObject;
			}
		}
		/// <summary>
		/// Gets the Singleton ResourceManager for this SubStore
		/// </summary>
		public static System.Resources.ResourceManager SingletonResourceManager
		{
			get
			{
				if (ISpySoft.SFSchemaLanguage.DomainModel.SFSchemaLanguage.resourceManager == null)
				{
					lock (ISpySoft.SFSchemaLanguage.DomainModel.SFSchemaLanguage.InternalSyncObject)
					{
						if (ISpySoft.SFSchemaLanguage.DomainModel.SFSchemaLanguage.resourceManager == null)
						{
							ISpySoft.SFSchemaLanguage.DomainModel.SFSchemaLanguage.resourceManager = new System.Resources.ResourceManager(ResourceBaseName, typeof(ISpySoft.SFSchemaLanguage.DomainModel.SFSchemaLanguage).Assembly);
						}
					}
				}
				return ISpySoft.SFSchemaLanguage.DomainModel.SFSchemaLanguage.resourceManager;
			}
		}
	}
	#endregion
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	public  class SFSchemaLanguageCopyClosure : Microsoft.VisualStudio.Modeling.IElementVisitorFilter
	{
		/// <summary>
		/// MetaRoles
		/// </summary>
		private System.Collections.Generic.Dictionary<System.Guid, System.Guid> metaRolesMember;
		/// <summary>
		/// Constructor
		/// </summary>
		public SFSchemaLanguageCopyClosure()
		{
			#region Initialize MetaData Table
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">MetaRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="metaRelationshipInfo">MetaRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual Microsoft.VisualStudio.Modeling.VisitorFilterResult ShouldVisitRelationship(Microsoft.VisualStudio.Modeling.ElementWalker walker, Microsoft.VisualStudio.Modeling.ModelElement sourceElement, Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleInfo, Microsoft.VisualStudio.Modeling.MetaRelationshipInfo metaRelationshipInfo, Microsoft.VisualStudio.Modeling.ElementLink targetRelationship)
		{
			return this.MetaRoles.ContainsKey(sourceRoleInfo.Id) ? Microsoft.VisualStudio.Modeling.VisitorFilterResult.Yes : Microsoft.VisualStudio.Modeling.VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetRoleInfo">MetaRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual Microsoft.VisualStudio.Modeling.VisitorFilterResult ShouldVisitRolePlayer(Microsoft.VisualStudio.Modeling.ElementWalker walker, Microsoft.VisualStudio.Modeling.ModelElement sourceElement, Microsoft.VisualStudio.Modeling.ElementLink elementLink, Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleInfo, Microsoft.VisualStudio.Modeling.ModelElement targetRolePlayer)
		{
			foreach (Microsoft.VisualStudio.Modeling.MetaRoleInfo metaRoleInfo in elementLink.MetaRelationship.MetaRoles)
			{
				if (metaRoleInfo != targetRoleInfo && this.MetaRoles.ContainsKey(metaRoleInfo.Id))
				{
					return Microsoft.VisualStudio.Modeling.VisitorFilterResult.Yes;
				}
			}
			return Microsoft.VisualStudio.Modeling.VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// MetaRoles
		/// </summary>
		private System.Collections.Generic.Dictionary<System.Guid, System.Guid> MetaRoles
		{
			get
			{
				if (this.metaRolesMember == null)
				{
					this.metaRolesMember = new System.Collections.Generic.Dictionary<System.Guid, System.Guid>();
				}
				return this.metaRolesMember;
			}
		}

	}
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	public  class SFSchemaLanguageRemoveClosure : Microsoft.VisualStudio.Modeling.IElementVisitorFilter
	{
		/// <summary>
		/// MetaRoles
		/// </summary>
		private System.Collections.Generic.Dictionary<System.Guid, System.Guid> metaRolesMember;
		/// <summary>
		/// Constructor
		/// </summary>
		public SFSchemaLanguageRemoveClosure()
		{
			#region Initialize MetaData Table
			MetaRoles.Add(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelHasSchemaModelItem.SchemaModelItemsMetaRoleGuid, ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelHasSchemaModelItem.SchemaModelItemsMetaRoleGuid);
			MetaRoles.Add(ISpySoft.SFSchemaLanguage.DomainModel.ViewPointHasStakeholder.StakeholdersMetaRoleGuid, ISpySoft.SFSchemaLanguage.DomainModel.ViewPointHasStakeholder.StakeholdersMetaRoleGuid);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">MetaRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="metaRelationshipInfo">MetaRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual Microsoft.VisualStudio.Modeling.VisitorFilterResult ShouldVisitRelationship(Microsoft.VisualStudio.Modeling.ElementWalker walker, Microsoft.VisualStudio.Modeling.ModelElement sourceElement, Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleInfo, Microsoft.VisualStudio.Modeling.MetaRelationshipInfo metaRelationshipInfo, Microsoft.VisualStudio.Modeling.ElementLink targetRelationship)
		{
			return Microsoft.VisualStudio.Modeling.VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetRoleInfo">MetaRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual Microsoft.VisualStudio.Modeling.VisitorFilterResult ShouldVisitRolePlayer(Microsoft.VisualStudio.Modeling.ElementWalker walker, Microsoft.VisualStudio.Modeling.ModelElement sourceElement, Microsoft.VisualStudio.Modeling.ElementLink elementLink, Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleInfo, Microsoft.VisualStudio.Modeling.ModelElement targetRolePlayer)
		{
			return this.MetaRoles.ContainsKey(targetRoleInfo.Id) ? Microsoft.VisualStudio.Modeling.VisitorFilterResult.Yes : Microsoft.VisualStudio.Modeling.VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// MetaRoles
		/// </summary>
		private System.Collections.Generic.Dictionary<System.Guid, System.Guid> MetaRoles
		{
			get
			{
				if (this.metaRolesMember == null)
				{
					this.metaRolesMember = new System.Collections.Generic.Dictionary<System.Guid, System.Guid>();
				}
				return this.metaRolesMember;
			}
		}

	}
	/// <summary>
	/// 
	/// </summary>
	public  partial class SFSchemaLanguage : Microsoft.VisualStudio.Modeling.SubStore
	{
		#region SFSchemaLanguage's AllGeneratedMetaModelTypes Code
		/// <summary>
		/// Virtual method that returns a collection of all types for metamodel 
		/// </summary>
		protected sealed override System.Type[] AllGeneratedMetaModelTypes()
		{
			System.Type[] typeArray = new System.Type[]
			{
				typeof(ISpySoft.SFSchemaLanguage.DomainModel.SFSchemaLanguage),
				typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModel),
				typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelElementFactoryCreator),
				typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem),
				typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemElementFactoryCreator),
				typeof(ISpySoft.SFSchemaLanguage.DomainModel.Activity),
				typeof(ISpySoft.SFSchemaLanguage.DomainModel.ActivityElementFactoryCreator),
				typeof(ISpySoft.SFSchemaLanguage.DomainModel.ViewPoint),
				typeof(ISpySoft.SFSchemaLanguage.DomainModel.ViewPointElementFactoryCreator),
				typeof(ISpySoft.SFSchemaLanguage.DomainModel.Mapping),
				typeof(ISpySoft.SFSchemaLanguage.DomainModel.MappingElementFactoryCreator),
				typeof(ISpySoft.SFSchemaLanguage.DomainModel.Artifact),
				typeof(ISpySoft.SFSchemaLanguage.DomainModel.ArtifactElementFactoryCreator),
				typeof(ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder),
				typeof(ISpySoft.SFSchemaLanguage.DomainModel.StakeholderElementFactoryCreator),
				typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelHasSchemaModelItem),
				typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelHasSchemaModelItemElementFactoryCreator),
				typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem),
				typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItemElementFactoryCreator),
				typeof(ISpySoft.SFSchemaLanguage.DomainModel.ViewPointHasStakeholder),
				typeof(ISpySoft.SFSchemaLanguage.DomainModel.ViewPointHasStakeholderElementFactoryCreator),

			};
			return typeArray;
		}
		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public  partial class SFSchemaLanguage : Microsoft.VisualStudio.Modeling.SubStore
	{
		#region SFSchemaLanguage's GeneratedReflectedMetaAttributes Code
		/// <summary>
		/// Virtual method that returns a collection of all fields for all types in metamodel SFSchemaLanguage
		/// </summary>
		protected sealed override Microsoft.VisualStudio.Modeling.MetaFieldInfo[] GeneratedReflectedMetaAttributes()
		{
			Microsoft.VisualStudio.Modeling.MetaFieldInfo[] typeArray = new Microsoft.VisualStudio.Modeling.MetaFieldInfo[]
			{
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(ISpySoft.SFSchemaLanguage.DomainModel.Activity), "Description", ISpySoft.SFSchemaLanguage.DomainModel.Activity.DescriptionMetaAttributeGuid, typeof(ISpySoft.SFSchemaLanguage.DomainModel.Activity.ActivityDescriptionFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(ISpySoft.SFSchemaLanguage.DomainModel.ViewPoint), "Description", ISpySoft.SFSchemaLanguage.DomainModel.ViewPoint.DescriptionMetaAttributeGuid, typeof(ISpySoft.SFSchemaLanguage.DomainModel.ViewPoint.ViewPointDescriptionFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(ISpySoft.SFSchemaLanguage.DomainModel.Mapping), "Description", ISpySoft.SFSchemaLanguage.DomainModel.Mapping.DescriptionMetaAttributeGuid, typeof(ISpySoft.SFSchemaLanguage.DomainModel.Mapping.MappingDescriptionFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(ISpySoft.SFSchemaLanguage.DomainModel.Artifact), "Type", ISpySoft.SFSchemaLanguage.DomainModel.Artifact.TypeMetaAttributeGuid, typeof(ISpySoft.SFSchemaLanguage.DomainModel.Artifact.ArtifactTypeFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(ISpySoft.SFSchemaLanguage.DomainModel.Artifact), "Description", ISpySoft.SFSchemaLanguage.DomainModel.Artifact.DescriptionMetaAttributeGuid, typeof(ISpySoft.SFSchemaLanguage.DomainModel.Artifact.ArtifactDescriptionFieldHandler)),
				new Microsoft.VisualStudio.Modeling.MetaFieldInfo(typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem), "Description", ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem.DescriptionMetaAttributeGuid, typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem.SchemaModelItemHasSchemaModelItemDescriptionFieldHandler)),

			};
			return typeArray;
		}
		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public  partial class SFSchemaLanguage : Microsoft.VisualStudio.Modeling.SubStore
	{
		#region SFSchemaLanguage's GeneratedReflectedMetaRoleAttributes Code
		/// <summary>
		/// Virtual method that returns a collection of all fields for all types in metamodel SFSchemaLanguage
		/// </summary>
		protected sealed override Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo[] GeneratedReflectedMetaRoles()
		{
			Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo[] typeArray = new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo[]
			{
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelHasSchemaModelItem), "SchemaModelItems", ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelHasSchemaModelItem.SchemaModelItemsMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelHasSchemaModelItem), "SchemaModel", ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelHasSchemaModelItem.SchemaModelMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem), "SchemaModelItemTarget", ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem.SchemaModelItemTargetMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem), "SchemaModelItemSource", ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem.SchemaModelItemSourceMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(ISpySoft.SFSchemaLanguage.DomainModel.ViewPointHasStakeholder), "Stakeholders", ISpySoft.SFSchemaLanguage.DomainModel.ViewPointHasStakeholder.StakeholdersMetaRoleGuid),
				new Microsoft.VisualStudio.Modeling.MetaRolePlayerInfo(typeof(ISpySoft.SFSchemaLanguage.DomainModel.ViewPointHasStakeholder), "ViewPoint", ISpySoft.SFSchemaLanguage.DomainModel.ViewPointHasStakeholder.ViewPointMetaRoleGuid),

			};
			return typeArray;
		}
		#endregion
	}
}
namespace ISpySoft.SFSchemaLanguage.DomainModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("678d8d2e-fe22-4992-919e-f3b5d3bd7c99")]
	[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModel.MetaClassGuidString, "SchemaModel")]
	public  partial class SchemaModel : Microsoft.VisualStudio.Modeling.NamedElement
	{
		#region SchemaModel's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "8dd64750-ace4-41ae-8e87-fd00cb59fbbc";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModel.MetaClassGuidString);
		#endregion

		#region SchemaModelItems's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemMoveableCollection SchemaModelItems
		{
			get { return new ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemMoveableCollection(this, ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelHasSchemaModelItem.SchemaModelMetaRoleGuid, ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelHasSchemaModelItem.SchemaModelItemsMetaRoleGuid); }
		}
		#endregion
	}
	#region SchemaModel's Generated Constructor Code
	public  partial class SchemaModel
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SchemaModel(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SchemaModel CreateSchemaModel(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateSchemaModel(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SchemaModel CreateAndInitializeSchemaModel(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSchemaModel(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SchemaModel(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SchemaModel CreateSchemaModel(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (SchemaModel)partition.ElementFactory.CreateElement(typeof(SchemaModel));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SchemaModel CreateAndInitializeSchemaModel(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SchemaModel)partition.ElementFactory.CreateElement(typeof(SchemaModel), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SchemaModel
	/// <summary>
	/// SchemaModel Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModel))]
	public sealed class SchemaModelElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SchemaModelElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new ISpySoft.SFSchemaLanguage.DomainModel.SchemaModel( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SchemaModelElementFactoryCreator Instance
		{
			get
			{
				return new SchemaModelElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace ISpySoft.SFSchemaLanguage.DomainModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("678d8d2e-fe22-4992-919e-f3b5d3bd7c99")]
	[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem.MetaClassGuidString, "SchemaModelItem")]
	public  partial class SchemaModelItem : Microsoft.VisualStudio.Modeling.NamedElement
	{
		#region SchemaModelItem's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "8bf2e477-8548-4726-a95d-1a46557c8fd3";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem.MetaClassGuidString);
		#endregion

		#region SchemaModel's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public ISpySoft.SFSchemaLanguage.DomainModel.SchemaModel SchemaModel
		{
			get
			{
				return this.GetCounterpartRolePlayer(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelHasSchemaModelItem.SchemaModelItemsMetaRoleGuid, ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelHasSchemaModelItem.SchemaModelMetaRoleGuid, false) as ISpySoft.SFSchemaLanguage.DomainModel.SchemaModel;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelHasSchemaModelItem.SchemaModelItemsMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelHasSchemaModelItem.SchemaModelMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							ISpySoft.SFSchemaLanguage.DomainModel.SchemaModel counterpart = link.GetRolePlayer(roleInfo) as ISpySoft.SFSchemaLanguage.DomainModel.SchemaModel;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelHasSchemaModelItem.SchemaModelMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelHasSchemaModelItem.SchemaModelItemsMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelHasSchemaModelItem), newRoles);
				}
			}
		}
		#endregion
		#region SchemaModelItemSource's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemMoveableCollection SchemaModelItemSource
		{
			get { return new ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemMoveableCollection(this, ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem.SchemaModelItemTargetMetaRoleGuid, ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem.SchemaModelItemSourceMetaRoleGuid); }
		}
		#endregion
		#region SchemaModelItemTarget's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemMoveableCollection SchemaModelItemTarget
		{
			get { return new ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemMoveableCollection(this, ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem.SchemaModelItemSourceMetaRoleGuid, ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem.SchemaModelItemTargetMetaRoleGuid); }
		}
		#endregion
	}
	#region Collection Classes for SchemaModelItem
	/// <summary>
	/// ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class SchemaModelItemMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public SchemaModelItemMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem) && !value.GetType().IsSubclassOf(typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem) && !value.GetType().IsSubclassOf(typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem) && !value.GetType().IsSubclassOf(typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem) && !value.GetType().IsSubclassOf(typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem) && !value.GetType().IsSubclassOf(typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem) && !value.GetType().IsSubclassOf(typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem) && !rolePlayer.GetType().IsSubclassOf(typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem) && !rolePlayer.GetType().IsSubclassOf(typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem at that index</returns>
		public ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem this[System.Int32 index]
		{
			get { return (ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem to insert into the list</param>
		public void Insert(System.Int32 index, ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem to remove from the list</param>
		public void Remove(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region SchemaModelItem's Generated Constructor Code
	public  partial class SchemaModelItem
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SchemaModelItem(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SchemaModelItem CreateSchemaModelItem(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateSchemaModelItem(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SchemaModelItem CreateAndInitializeSchemaModelItem(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSchemaModelItem(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SchemaModelItem(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SchemaModelItem CreateSchemaModelItem(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (SchemaModelItem)partition.ElementFactory.CreateElement(typeof(SchemaModelItem));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SchemaModelItem CreateAndInitializeSchemaModelItem(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SchemaModelItem)partition.ElementFactory.CreateElement(typeof(SchemaModelItem), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SchemaModelItem
	/// <summary>
	/// SchemaModelItem Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem))]
	public sealed class SchemaModelItemElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SchemaModelItemElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SchemaModelItemElementFactoryCreator Instance
		{
			get
			{
				return new SchemaModelItemElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace ISpySoft.SFSchemaLanguage.DomainModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("678d8d2e-fe22-4992-919e-f3b5d3bd7c99")]
	[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.SFSchemaLanguage.DomainModel.Activity.MetaClassGuidString, "Activity")]
	public  partial class Activity : ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem
	{
		#region Activity's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "bb769fdf-3091-4266-9faf-fc1ab52d1ad0";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(ISpySoft.SFSchemaLanguage.DomainModel.Activity.MetaClassGuidString);
		#endregion

		#region Description's Generated  Field Code
		#region Description's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String DescriptionMetaAttributeGuidString = "0a5feb78-c746-4962-a695-f25320e4df81";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid DescriptionMetaAttributeGuid = new System.Guid(ISpySoft.SFSchemaLanguage.DomainModel.Activity.DescriptionMetaAttributeGuidString);
		#endregion

		#region Description's Generated Property Code

		private System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ActivityDescriptionFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.SFSchemaLanguage.DomainModel.Activity.DescriptionMetaAttributeGuidString, "Activity.Description")]
		public  System.String Description
		{
			get
			{
				return descriptionPropertyStorage;
			}
		
			set
			{
				activityDescriptionFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ActivityDescriptionFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Activity.Description field
		/// </summary>
		private static ActivityDescriptionFieldHandler	activityDescriptionFieldHandler	= ActivityDescriptionFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Activity.Description
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ActivityDescriptionFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<ISpySoft.SFSchemaLanguage.DomainModel.Activity,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ActivityDescriptionFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Activity.Description field handler
			/// </summary>
			/// <value>ActivityDescriptionFieldHandler</value>
			public static ActivityDescriptionFieldHandler Instance
			{
				get
				{
					if (ISpySoft.SFSchemaLanguage.DomainModel.Activity.activityDescriptionFieldHandler != null)
					{
						return ISpySoft.SFSchemaLanguage.DomainModel.Activity.activityDescriptionFieldHandler;
					}
					else
					{
						// The static constructor in Activity will assign this value to
						// ISpySoft.SFSchemaLanguage.DomainModel.Activity.activityDescriptionFieldHandler, so just instantiate one and return it
						return new ActivityDescriptionFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Activity.Description field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return ISpySoft.SFSchemaLanguage.DomainModel.Activity.DescriptionMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the Activity</param>
			protected sealed override System.String GetValue(ISpySoft.SFSchemaLanguage.DomainModel.Activity element)
			{
				return element.descriptionPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(ISpySoft.SFSchemaLanguage.DomainModel.Activity element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.descriptionPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.descriptionPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
	}
	#region Activity's Generated Constructor Code
	public  partial class Activity
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public Activity(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Activity CreateActivity(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateActivity(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Activity CreateAndInitializeActivity(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeActivity(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public Activity(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Activity CreateActivity(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (Activity)partition.ElementFactory.CreateElement(typeof(Activity));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Activity CreateAndInitializeActivity(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (Activity)partition.ElementFactory.CreateElement(typeof(Activity), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for Activity
	/// <summary>
	/// Activity Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(ISpySoft.SFSchemaLanguage.DomainModel.Activity))]
	public sealed class ActivityElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ActivityElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new ISpySoft.SFSchemaLanguage.DomainModel.Activity( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ActivityElementFactoryCreator Instance
		{
			get
			{
				return new ActivityElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace ISpySoft.SFSchemaLanguage.DomainModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("678d8d2e-fe22-4992-919e-f3b5d3bd7c99")]
	[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.SFSchemaLanguage.DomainModel.ViewPoint.MetaClassGuidString, "ViewPoint")]
	public  partial class ViewPoint : ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem
	{
		#region ViewPoint's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "badf2b84-d0bb-4ad9-ae6a-2e6f01f0ae08";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(ISpySoft.SFSchemaLanguage.DomainModel.ViewPoint.MetaClassGuidString);
		#endregion

		#region Description's Generated  Field Code
		#region Description's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String DescriptionMetaAttributeGuidString = "9fb7ce4a-fc7b-4383-b533-dbd1cdb5c0ac";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid DescriptionMetaAttributeGuid = new System.Guid(ISpySoft.SFSchemaLanguage.DomainModel.ViewPoint.DescriptionMetaAttributeGuidString);
		#endregion

		#region Description's Generated Property Code

		private System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ViewPointDescriptionFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.SFSchemaLanguage.DomainModel.ViewPoint.DescriptionMetaAttributeGuidString, "ViewPoint.Description")]
		public  System.String Description
		{
			get
			{
				return descriptionPropertyStorage;
			}
		
			set
			{
				viewPointDescriptionFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ViewPointDescriptionFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for ViewPoint.Description field
		/// </summary>
		private static ViewPointDescriptionFieldHandler	viewPointDescriptionFieldHandler	= ViewPointDescriptionFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for ViewPoint.Description
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ViewPointDescriptionFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<ISpySoft.SFSchemaLanguage.DomainModel.ViewPoint,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ViewPointDescriptionFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the ViewPoint.Description field handler
			/// </summary>
			/// <value>ViewPointDescriptionFieldHandler</value>
			public static ViewPointDescriptionFieldHandler Instance
			{
				get
				{
					if (ISpySoft.SFSchemaLanguage.DomainModel.ViewPoint.viewPointDescriptionFieldHandler != null)
					{
						return ISpySoft.SFSchemaLanguage.DomainModel.ViewPoint.viewPointDescriptionFieldHandler;
					}
					else
					{
						// The static constructor in ViewPoint will assign this value to
						// ISpySoft.SFSchemaLanguage.DomainModel.ViewPoint.viewPointDescriptionFieldHandler, so just instantiate one and return it
						return new ViewPointDescriptionFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the ViewPoint.Description field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return ISpySoft.SFSchemaLanguage.DomainModel.ViewPoint.DescriptionMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the ViewPoint</param>
			protected sealed override System.String GetValue(ISpySoft.SFSchemaLanguage.DomainModel.ViewPoint element)
			{
				return element.descriptionPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(ISpySoft.SFSchemaLanguage.DomainModel.ViewPoint element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.descriptionPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.descriptionPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region Stakeholders's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public ISpySoft.SFSchemaLanguage.DomainModel.StakeholderMoveableCollection Stakeholders
		{
			get { return new ISpySoft.SFSchemaLanguage.DomainModel.StakeholderMoveableCollection(this, ISpySoft.SFSchemaLanguage.DomainModel.ViewPointHasStakeholder.ViewPointMetaRoleGuid, ISpySoft.SFSchemaLanguage.DomainModel.ViewPointHasStakeholder.StakeholdersMetaRoleGuid); }
		}
		#endregion
	}
	#region ViewPoint's Generated Constructor Code
	public  partial class ViewPoint
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ViewPoint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ViewPoint CreateViewPoint(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateViewPoint(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ViewPoint CreateAndInitializeViewPoint(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeViewPoint(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ViewPoint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ViewPoint CreateViewPoint(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (ViewPoint)partition.ElementFactory.CreateElement(typeof(ViewPoint));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ViewPoint CreateAndInitializeViewPoint(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ViewPoint)partition.ElementFactory.CreateElement(typeof(ViewPoint), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ViewPoint
	/// <summary>
	/// ViewPoint Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(ISpySoft.SFSchemaLanguage.DomainModel.ViewPoint))]
	public sealed class ViewPointElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ViewPointElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new ISpySoft.SFSchemaLanguage.DomainModel.ViewPoint( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ViewPointElementFactoryCreator Instance
		{
			get
			{
				return new ViewPointElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace ISpySoft.SFSchemaLanguage.DomainModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("678d8d2e-fe22-4992-919e-f3b5d3bd7c99")]
	[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.SFSchemaLanguage.DomainModel.Mapping.MetaClassGuidString, "Mapping")]
	public  partial class Mapping : ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem
	{
		#region Mapping's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "f9f42e18-e1e9-4f3a-9dd6-d1375cc8c664";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(ISpySoft.SFSchemaLanguage.DomainModel.Mapping.MetaClassGuidString);
		#endregion

		#region Description's Generated  Field Code
		#region Description's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String DescriptionMetaAttributeGuidString = "f41f92c6-34da-4824-9f50-99320648daf6";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid DescriptionMetaAttributeGuid = new System.Guid(ISpySoft.SFSchemaLanguage.DomainModel.Mapping.DescriptionMetaAttributeGuidString);
		#endregion

		#region Description's Generated Property Code

		private System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(MappingDescriptionFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.SFSchemaLanguage.DomainModel.Mapping.DescriptionMetaAttributeGuidString, "Mapping.Description")]
		public  System.String Description
		{
			get
			{
				return descriptionPropertyStorage;
			}
		
			set
			{
				mappingDescriptionFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region MappingDescriptionFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Mapping.Description field
		/// </summary>
		private static MappingDescriptionFieldHandler	mappingDescriptionFieldHandler	= MappingDescriptionFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Mapping.Description
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class MappingDescriptionFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<ISpySoft.SFSchemaLanguage.DomainModel.Mapping,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private MappingDescriptionFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Mapping.Description field handler
			/// </summary>
			/// <value>MappingDescriptionFieldHandler</value>
			public static MappingDescriptionFieldHandler Instance
			{
				get
				{
					if (ISpySoft.SFSchemaLanguage.DomainModel.Mapping.mappingDescriptionFieldHandler != null)
					{
						return ISpySoft.SFSchemaLanguage.DomainModel.Mapping.mappingDescriptionFieldHandler;
					}
					else
					{
						// The static constructor in Mapping will assign this value to
						// ISpySoft.SFSchemaLanguage.DomainModel.Mapping.mappingDescriptionFieldHandler, so just instantiate one and return it
						return new MappingDescriptionFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Mapping.Description field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return ISpySoft.SFSchemaLanguage.DomainModel.Mapping.DescriptionMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the Mapping</param>
			protected sealed override System.String GetValue(ISpySoft.SFSchemaLanguage.DomainModel.Mapping element)
			{
				return element.descriptionPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(ISpySoft.SFSchemaLanguage.DomainModel.Mapping element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.descriptionPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.descriptionPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
	}
	#region Mapping's Generated Constructor Code
	public  partial class Mapping
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public Mapping(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Mapping CreateMapping(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateMapping(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Mapping CreateAndInitializeMapping(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeMapping(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public Mapping(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Mapping CreateMapping(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (Mapping)partition.ElementFactory.CreateElement(typeof(Mapping));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Mapping CreateAndInitializeMapping(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (Mapping)partition.ElementFactory.CreateElement(typeof(Mapping), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for Mapping
	/// <summary>
	/// Mapping Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(ISpySoft.SFSchemaLanguage.DomainModel.Mapping))]
	public sealed class MappingElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public MappingElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new ISpySoft.SFSchemaLanguage.DomainModel.Mapping( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static MappingElementFactoryCreator Instance
		{
			get
			{
				return new MappingElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace ISpySoft.SFSchemaLanguage.DomainModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("678d8d2e-fe22-4992-919e-f3b5d3bd7c99")]
	[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.SFSchemaLanguage.DomainModel.Artifact.MetaClassGuidString, "Artifact")]
	public  partial class Artifact : ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem
	{
		#region Artifact's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "421d9337-3c74-4c83-bbbc-c53d300a15a2";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(ISpySoft.SFSchemaLanguage.DomainModel.Artifact.MetaClassGuidString);
		#endregion

		#region Type's Generated  Field Code
		#region Type's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String TypeMetaAttributeGuidString = "238c8cd9-a113-48db-934c-3fa74ff298e4";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid TypeMetaAttributeGuid = new System.Guid(ISpySoft.SFSchemaLanguage.DomainModel.Artifact.TypeMetaAttributeGuidString);
		#endregion

		#region Type's Generated Property Code

		private ISpySoft.SFSchemaLanguage.DomainModel.ArtifactType typePropertyStorage = ISpySoft.SFSchemaLanguage.DomainModel.ArtifactType.Asset;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.EnumerationDomainAttribute(EnumerationType=typeof(ISpySoft.SFSchemaLanguage.DomainModel.ArtifactType),DefaultEnumerationValueName="Asset")]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ArtifactTypeFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.SFSchemaLanguage.DomainModel.Artifact.TypeMetaAttributeGuidString, "Artifact.Type")]
		public  ISpySoft.SFSchemaLanguage.DomainModel.ArtifactType Type
		{
			get
			{
				return typePropertyStorage;
			}
		
			set
			{
				artifactTypeFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ArtifactTypeFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Artifact.Type field
		/// </summary>
		private static ArtifactTypeFieldHandler	artifactTypeFieldHandler	= ArtifactTypeFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Artifact.Type
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ArtifactTypeFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<ISpySoft.SFSchemaLanguage.DomainModel.Artifact,ISpySoft.SFSchemaLanguage.DomainModel.ArtifactType>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ArtifactTypeFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Artifact.Type field handler
			/// </summary>
			/// <value>ArtifactTypeFieldHandler</value>
			public static ArtifactTypeFieldHandler Instance
			{
				get
				{
					if (ISpySoft.SFSchemaLanguage.DomainModel.Artifact.artifactTypeFieldHandler != null)
					{
						return ISpySoft.SFSchemaLanguage.DomainModel.Artifact.artifactTypeFieldHandler;
					}
					else
					{
						// The static constructor in Artifact will assign this value to
						// ISpySoft.SFSchemaLanguage.DomainModel.Artifact.artifactTypeFieldHandler, so just instantiate one and return it
						return new ArtifactTypeFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Artifact.Type field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return ISpySoft.SFSchemaLanguage.DomainModel.Artifact.TypeMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the Artifact</param>
			protected sealed override ISpySoft.SFSchemaLanguage.DomainModel.ArtifactType GetValue(ISpySoft.SFSchemaLanguage.DomainModel.Artifact element)
			{
				return element.typePropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(ISpySoft.SFSchemaLanguage.DomainModel.Artifact element, ISpySoft.SFSchemaLanguage.DomainModel.ArtifactType value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref ISpySoft.SFSchemaLanguage.DomainModel.ArtifactType oldValue)
			{
				oldValue = element.typePropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.typePropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region Description's Generated  Field Code
		#region Description's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String DescriptionMetaAttributeGuidString = "c4899c1a-039b-485f-b490-1d18cb286f96";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid DescriptionMetaAttributeGuid = new System.Guid(ISpySoft.SFSchemaLanguage.DomainModel.Artifact.DescriptionMetaAttributeGuidString);
		#endregion

		#region Description's Generated Property Code

		private System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(ArtifactDescriptionFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.SFSchemaLanguage.DomainModel.Artifact.DescriptionMetaAttributeGuidString, "Artifact.Description")]
		public  System.String Description
		{
			get
			{
				return descriptionPropertyStorage;
			}
		
			set
			{
				artifactDescriptionFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region ArtifactDescriptionFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for Artifact.Description field
		/// </summary>
		private static ArtifactDescriptionFieldHandler	artifactDescriptionFieldHandler	= ArtifactDescriptionFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for Artifact.Description
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class ArtifactDescriptionFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<ISpySoft.SFSchemaLanguage.DomainModel.Artifact,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private ArtifactDescriptionFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the Artifact.Description field handler
			/// </summary>
			/// <value>ArtifactDescriptionFieldHandler</value>
			public static ArtifactDescriptionFieldHandler Instance
			{
				get
				{
					if (ISpySoft.SFSchemaLanguage.DomainModel.Artifact.artifactDescriptionFieldHandler != null)
					{
						return ISpySoft.SFSchemaLanguage.DomainModel.Artifact.artifactDescriptionFieldHandler;
					}
					else
					{
						// The static constructor in Artifact will assign this value to
						// ISpySoft.SFSchemaLanguage.DomainModel.Artifact.artifactDescriptionFieldHandler, so just instantiate one and return it
						return new ArtifactDescriptionFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the Artifact.Description field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return ISpySoft.SFSchemaLanguage.DomainModel.Artifact.DescriptionMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the Artifact</param>
			protected sealed override System.String GetValue(ISpySoft.SFSchemaLanguage.DomainModel.Artifact element)
			{
				return element.descriptionPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(ISpySoft.SFSchemaLanguage.DomainModel.Artifact element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.descriptionPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.descriptionPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
	}
	#region Artifact's Generated Constructor Code
	public  partial class Artifact
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public Artifact(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Artifact CreateArtifact(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateArtifact(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Artifact CreateAndInitializeArtifact(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeArtifact(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public Artifact(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Artifact CreateArtifact(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (Artifact)partition.ElementFactory.CreateElement(typeof(Artifact));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Artifact CreateAndInitializeArtifact(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (Artifact)partition.ElementFactory.CreateElement(typeof(Artifact), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for Artifact
	/// <summary>
	/// Artifact Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(ISpySoft.SFSchemaLanguage.DomainModel.Artifact))]
	public sealed class ArtifactElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ArtifactElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new ISpySoft.SFSchemaLanguage.DomainModel.Artifact( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ArtifactElementFactoryCreator Instance
		{
			get
			{
				return new ArtifactElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace ISpySoft.SFSchemaLanguage.DomainModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaClass("678d8d2e-fe22-4992-919e-f3b5d3bd7c99")]
	[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder.MetaClassGuidString, "Stakeholder")]
	public  partial class Stakeholder : Microsoft.VisualStudio.Modeling.NamedElement
	{
		#region Stakeholder's Generated MetaClass Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "58b0f271-e684-4f18-b842-ce070fc87b93";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder.MetaClassGuidString);
		#endregion

		#region ViewPoint's Generated Accessor Code
		/// <summary>
		/// 
		/// </summary>
		public ISpySoft.SFSchemaLanguage.DomainModel.ViewPoint ViewPoint
		{
			get
			{
				return this.GetCounterpartRolePlayer(ISpySoft.SFSchemaLanguage.DomainModel.ViewPointHasStakeholder.StakeholdersMetaRoleGuid, ISpySoft.SFSchemaLanguage.DomainModel.ViewPointHasStakeholder.ViewPointMetaRoleGuid, false) as ISpySoft.SFSchemaLanguage.DomainModel.ViewPoint;
			}
			set
			{
				bool sameRolePlayer = false;
				System.Collections.IList links = this.GetElementLinks(ISpySoft.SFSchemaLanguage.DomainModel.ViewPointHasStakeholder.StakeholdersMetaRoleGuid);
				if (links.Count > 0)
				{
					System.Diagnostics.Debug.Assert(1 == links.Count);
					Microsoft.VisualStudio.Modeling.MetaRoleInfo roleInfo = this.Partition.MetaDataDirectory.FindMetaRole(ISpySoft.SFSchemaLanguage.DomainModel.ViewPointHasStakeholder.ViewPointMetaRoleGuid);
					foreach (Microsoft.VisualStudio.Modeling.ElementLink link in links)
					{
						if (!link.IsRemoved)
						{
							ISpySoft.SFSchemaLanguage.DomainModel.ViewPoint counterpart = link.GetRolePlayer(roleInfo) as ISpySoft.SFSchemaLanguage.DomainModel.ViewPoint;
							if (counterpart != null && object.ReferenceEquals(counterpart, value))
							{
								sameRolePlayer = true;
							}
							else
							{
								link.Remove();
							}
							break;
						}
					}
				}
				if ((!sameRolePlayer) && (value != null))
				{
					Microsoft.VisualStudio.Modeling.RoleAssignment[] newRoles = new Microsoft.VisualStudio.Modeling.RoleAssignment[2];
					newRoles[0] = new Microsoft.VisualStudio.Modeling.RoleAssignment(ISpySoft.SFSchemaLanguage.DomainModel.ViewPointHasStakeholder.ViewPointMetaRoleGuid, value);
					newRoles[1] = new Microsoft.VisualStudio.Modeling.RoleAssignment(ISpySoft.SFSchemaLanguage.DomainModel.ViewPointHasStakeholder.StakeholdersMetaRoleGuid, this);
					this.Partition.ElementFactory.CreateElementLink(typeof(ISpySoft.SFSchemaLanguage.DomainModel.ViewPointHasStakeholder), newRoles);
				}
			}
		}
		#endregion
	}
	#region Collection Classes for Stakeholder
	/// <summary>
	/// ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder Collection class, strongly-typed collection
	/// </summary>
	[System.CLSCompliant(true)]
	public sealed partial class StakeholderMoveableCollection : Microsoft.VisualStudio.Modeling.IMoveableCollection
	{
		private Microsoft.VisualStudio.Modeling.ModelElement counterpartMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo sourceRoleMember;
		private Microsoft.VisualStudio.Modeling.MetaRoleInfo targetRoleMember;
		/// <summary>
		/// Counterpart
		/// </summary>
		public Microsoft.VisualStudio.Modeling.ModelElement Counterpart
		{
			get { return this.counterpartMember; }
		}
		/// <summary>
		/// Source Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo SourceRole
		{
			get { return this.sourceRoleMember; }
		}
		/// <summary>
		/// Target Role
		/// </summary>
		public Microsoft.VisualStudio.Modeling.MetaRoleInfo TargetRole
		{
			get { return this.targetRoleMember; }
		}
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="counterpart">Counterpart to create relationship with</param>
		/// <param name="sourceMetaRoleGuid">Source's meta role in this relationship</param>
		/// <param name="targetMetaRoleGuid">Target's meta role in this relationship</param>
		public StakeholderMoveableCollection(Microsoft.VisualStudio.Modeling.ModelElement counterpart, System.Guid sourceMetaRoleGuid, System.Guid targetMetaRoleGuid)
		{
			this.counterpartMember = counterpart;
			this.sourceRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(sourceMetaRoleGuid);
			this.targetRoleMember = counterpart.Partition.MetaDataDirectory.FindMetaRole(targetMetaRoleGuid);
		}
		/// <summary>
		/// Returns an enumerator that can iterate through a collection
		/// </summary>
		/// <returns>Enumerator</returns>
		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).GetEnumerator();
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).CopyTo(array, index);
		}
		/// <summary>
		/// When implemented by a class, gets the number of elements contained in the System.Collections.ICollection
		/// </summary>
		System.Int32 System.Collections.ICollection.Count
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Count; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread-safe)
		/// </summary>
		System.Boolean System.Collections.ICollection.IsSynchronized
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsSynchronized; }
		}
		/// <summary>
		/// When implemented by a class, gets an object that can be used to synchronize access to the System.Collections.ICollection
		/// </summary>
		System.Object System.Collections.ICollection.SyncRoot
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).SyncRoot; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList has a fixed size
		/// </summary>
		System.Boolean System.Collections.IList.IsFixedSize
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsFixedSize; }
		}
		/// <summary>
		/// When implemented by a class, gets a value indicating whether the System.Collections.IList is read-only
		/// </summary>
		System.Boolean System.Collections.IList.IsReadOnly
		{
			get { return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>object at that index</returns>
		System.Object System.Collections.IList.this[System.Int32 index]
		{
			get
			{
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				return list[index];
			}
			set
			{
				if (value == null || (value.GetType() != typeof(ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder) && !value.GetType().IsSubclassOf(typeof(ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder))))
				{
					throw new System.InvalidCastException();
				}
				Microsoft.VisualStudio.Modeling.IMoveableCollection list = this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole);
				list[index] = value;
			}
		}
		/// <summary>
		/// When implemented by a class, adds an item to the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to add to the System.Collections.IList</param>
		/// <returns>index where object was added</returns>
		System.Int32 System.Collections.IList.Add(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder) && !value.GetType().IsSubclassOf(typeof(ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Add(value);
		}
		/// <summary>
		/// When implemented by a class, removes all items from the System.Collections.IList
		/// </summary>
		void System.Collections.IList.Clear()
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Clear();
		}
		/// <summary>
		/// When implemented by a class, determines whether the System.Collections.IList has a specific value
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>true if object is contained, false otherwise</returns>
		System.Boolean System.Collections.IList.Contains(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder) && !value.GetType().IsSubclassOf(typeof(ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Contains(value);
		}
		/// <summary>
		/// When implemented by a class, determines the index of a specific item in the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to locate in the System.Collections.IList</param>
		/// <returns>index of object</returns>
		System.Int32 System.Collections.IList.IndexOf(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder) && !value.GetType().IsSubclassOf(typeof(ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder))))
			{
				throw new System.InvalidCastException();
			}
			return this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).IndexOf(value);
		}
		/// <summary>
		/// When implemented by a class, inserts an item to the System.Collections.IList at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The System.Object to insert into the System.Collections.IList</param>
		void System.Collections.IList.Insert(System.Int32 index, System.Object value)
		{
			if (value == null || (value.GetType() != typeof(ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder) && !value.GetType().IsSubclassOf(typeof(ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Insert(index, value);
		}
		/// <summary>
		/// When implemented by a class, removes the first occurrence of a specific object from the System.Collections.IList
		/// </summary>
		/// <param name="value">The System.Object to remove from the System.Collections.IList</param>
		void System.Collections.IList.Remove(System.Object value)
		{
			if (value == null || (value.GetType() != typeof(ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder) && !value.GetType().IsSubclassOf(typeof(ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Remove(value);
		}
		/// <summary>
		/// When implemented by a class, removes the System.Collections.IList item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		void System.Collections.IList.RemoveAt(System.Int32 index)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(Microsoft.VisualStudio.Modeling.ModelElement rolePlayer, System.Int32 newPosition)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder) && !rolePlayer.GetType().IsSubclassOf(typeof(ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(rolePlayer, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		void Microsoft.VisualStudio.Modeling.IMoveableCollection.ReplaceAt(System.Int32 position, Microsoft.VisualStudio.Modeling.ModelElement rolePlayer)
		{
			if (rolePlayer == null || (rolePlayer.GetType() != typeof(ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder) && !rolePlayer.GetType().IsSubclassOf(typeof(ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder))))
			{
				throw new System.InvalidCastException();
			}
			this.Counterpart.GetMoveableRolePlayers(this.SourceRole, this.TargetRole).ReplaceAt(position, rolePlayer);
		}
		/// <summary>
		/// When implemented by a class, copies the elements of the System.Collection.ICollections to an System.Array, starting at a particular System.Array index
		/// </summary>
		/// <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.ICollection.  The System.Array must have zero-based indexing</param>
		/// <param name="index">The zero-based index in array at which copying begins</param>
		public void CopyTo(ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder[] array, System.Int32 index)
		{
			((System.Collections.ICollection)this).CopyTo(array, index);
		}
		/// <summary>
		/// Gets the number of elements contained in the collection
		/// </summary>
		public System.Int32 Count
		{
			get { return ((System.Collections.ICollection)this).Count; }
		}
		/// <summary>
		/// Gets a value indicating whether the list is read-only
		/// </summary>
		public System.Boolean IsReadOnly
		{
			get { return ((System.Collections.IList)this).IsReadOnly; }
		}
		/// <summary>
		/// Indexed accessor
		/// </summary>
		/// <param name="index">Index to access</param>
		/// <returns>ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder at that index</returns>
		public ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder this[System.Int32 index]
		{
			get { return (ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder)(((System.Collections.IList)this)[index]); }
			set { ((System.Collections.IList)this)[index] = value as System.Object; }
		}
		/// <summary>
		/// Adds an item to the list
		/// </summary>
		/// <param name="value">The ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder to add to the list</param>
		/// <returns>index where object was added</returns>
		public System.Int32 Add(ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder value)
		{
			return ((System.Collections.IList)this).Add(value as System.Object);
		}
		/// <summary>
		/// Removes all items from the list
		/// </summary>
		public void Clear()
		{
			((System.Collections.IList)this).Clear();
		}
		/// <summary>
		/// Determines whether the list has a specific value
		/// </summary>
		/// <param name="value">The ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder to locate in the list</param>
		/// <returns>true if object is contained, false otherwise</returns>
		public System.Boolean Contains(ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder value)
		{
			return ((System.Collections.IList)this).Contains(value as System.Object);
		}
		/// <summary>
		/// Determines the index of a specific item in the list
		/// </summary>
		/// <param name="value">The ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder to locate in the list</param>
		/// <returns>index of object</returns>
		public System.Int32 IndexOf(ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder value)
		{
			return ((System.Collections.IList)this).IndexOf(value as System.Object);
		}
		/// <summary>
		/// Inserts an item to the list at the specified position
		/// </summary>
		/// <param name="index">The zero-based index at which the value should be inserted</param>
		/// <param name="value">The ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder to insert into the list</param>
		public void Insert(System.Int32 index, ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder value)
		{
			((System.Collections.IList)this).Insert(index, value as System.Object);
		}
		/// <summary>
		/// Removes the first occurrence of a specific object from the list
		/// </summary>
		/// <param name="value">The ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder to remove from the list</param>
		public void Remove(ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder value)
		{
			((System.Collections.IList)this).Remove(value as System.Object);
		}
		/// <summary>
		/// Removes the list item at the specified index
		/// </summary>
		/// <param name="index">The zero-based index of the item to remove</param>
		public void RemoveAt(System.Int32 index)
		{
			((System.Collections.IList)this).RemoveAt(index);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="rolePlayer">The role player to move</param>
		/// <param name="newPosition">The position to move to</param>
		public void Move(ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder rolePlayer, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement, newPosition);
		}
		/// <summary>
		/// Move the roleplayer to the new position in the collection
		/// </summary>
		/// <param name="oldPosition">The position of the role player to move from</param>
		/// <param name="newPosition">The position of the role player to move to</param>
		public void Move(System.Int32 oldPosition, System.Int32 newPosition)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).Move(oldPosition, newPosition);
		}
		/// <summary>
		/// Insert a roleplayer in the specified location
		/// </summary>
		/// <param name="position">The index of the roleplayer that needs to be replaced</param>
		/// <param name="rolePlayer">The role player that will be inserted</param>
		public void ReplaceAt(System.Int32 position, ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder rolePlayer)
		{
			((Microsoft.VisualStudio.Modeling.IMoveableCollection)this).ReplaceAt(position, rolePlayer as Microsoft.VisualStudio.Modeling.ModelElement);
		}

	}
	#endregion

	#region Stakeholder's Generated Constructor Code
	public  partial class Stakeholder
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public Stakeholder(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Stakeholder CreateStakeholder(Microsoft.VisualStudio.Modeling.Store store)
		{
			return CreateStakeholder(store.DefaultPartition);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Stakeholder CreateAndInitializeStakeholder(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeStakeholder(store.DefaultPartition, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public Stakeholder(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
			: base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Stakeholder CreateStakeholder(Microsoft.VisualStudio.Modeling.Partition partition)
		{
			return (Stakeholder)partition.ElementFactory.CreateElement(typeof(Stakeholder));
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static Stakeholder CreateAndInitializeStakeholder(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (Stakeholder)partition.ElementFactory.CreateElement(typeof(Stakeholder), assignments);
		}
	}
	#endregion
	#region Class Factory Creator for Stakeholder
	/// <summary>
	/// Stakeholder Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder))]
	public sealed class StakeholderElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public StakeholderElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static StakeholderElementFactoryCreator Instance
		{
			get
			{
				return new StakeholderElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace ISpySoft.SFSchemaLanguage.DomainModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("678d8d2e-fe22-4992-919e-f3b5d3bd7c99")]
	[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelHasSchemaModelItem.MetaRelationshipGuidString, "SchemaModelHasSchemaModelItem")]
	public  partial class SchemaModelHasSchemaModelItem : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region SchemaModelHasSchemaModelItem's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "e1e0d2fd-0fae-44d0-8f65-5b0033e6a9c4";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelHasSchemaModelItem.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = SchemaModelHasSchemaModelItem.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = SchemaModelHasSchemaModelItem.MetaClassGuid;
		#endregion

		#region SchemaModelItems's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String SchemaModelItemsMetaRoleGuidString = "be5f6fc5-b865-4808-bec3-dda61a2951f7";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid SchemaModelItemsMetaRoleGuid = new System.Guid(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelHasSchemaModelItem.SchemaModelItemsMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=true, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelHasSchemaModelItem.SchemaModelItemsMetaRoleGuidString, "SchemaModelHasSchemaModelItem.SchemaModelItems")]
		public  ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem SchemaModelItems
		{
			get { return (ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem)this.GetRolePlayer(SchemaModelItemsMetaRoleGuid); }
			set { this.SetRolePlayer(SchemaModelItemsMetaRoleGuid, value); }
		}
		
		#endregion
		#region SchemaModel's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String SchemaModelMetaRoleGuidString = "6a906d5e-bef9-44ed-a74b-0760718c9d60";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid SchemaModelMetaRoleGuid = new System.Guid(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelHasSchemaModelItem.SchemaModelMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=false, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelHasSchemaModelItem.SchemaModelMetaRoleGuidString, "SchemaModelHasSchemaModelItem.SchemaModel")]
		public  ISpySoft.SFSchemaLanguage.DomainModel.SchemaModel SchemaModel
		{
			get { return (ISpySoft.SFSchemaLanguage.DomainModel.SchemaModel)this.GetRolePlayer(SchemaModelMetaRoleGuid); }
			set { this.SetRolePlayer(SchemaModelMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region SchemaModelHasSchemaModelItem's Generated Constructor Code
	public  partial class SchemaModelHasSchemaModelItem
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SchemaModelHasSchemaModelItem(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SchemaModelHasSchemaModelItem CreateSchemaModelHasSchemaModelItem(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateSchemaModelHasSchemaModelItem(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SchemaModelHasSchemaModelItem CreateAndInitializeSchemaModelHasSchemaModelItem(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSchemaModelHasSchemaModelItem(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SchemaModelHasSchemaModelItem(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SchemaModelHasSchemaModelItem CreateSchemaModelHasSchemaModelItem(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (SchemaModelHasSchemaModelItem)partition.ElementFactory.CreateElementLink(typeof(SchemaModelHasSchemaModelItem), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SchemaModelHasSchemaModelItem CreateAndInitializeSchemaModelHasSchemaModelItem(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SchemaModelHasSchemaModelItem)partition.ElementFactory.CreateElementLink(typeof(SchemaModelHasSchemaModelItem), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SchemaModelHasSchemaModelItem
	/// <summary>
	/// SchemaModelHasSchemaModelItem Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelHasSchemaModelItem))]
	public sealed class SchemaModelHasSchemaModelItemElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SchemaModelHasSchemaModelItemElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelHasSchemaModelItem( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SchemaModelHasSchemaModelItemElementFactoryCreator Instance
		{
			get
			{
				return new SchemaModelHasSchemaModelItemElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace ISpySoft.SFSchemaLanguage.DomainModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("678d8d2e-fe22-4992-919e-f3b5d3bd7c99")]
	[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem.MetaRelationshipGuidString, "SchemaModelItemHasSchemaModelItem")]
	public  partial class SchemaModelItemHasSchemaModelItem : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region SchemaModelItemHasSchemaModelItem's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "3dde17d9-a249-4173-a6ff-296dcc89ca88";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = SchemaModelItemHasSchemaModelItem.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = SchemaModelItemHasSchemaModelItem.MetaClassGuid;
		#endregion

		#region Description's Generated  Field Code
		#region Description's Generated  MetaAttribute Code
		/// <summary>
		/// MetaAttribute Guid String
		/// </summary>
		public const System.String DescriptionMetaAttributeGuidString = "f0aa6333-110e-4a5b-9749-05ebcc90d2f2";

		/// <summary>
		/// MetaAttribute Guid
		/// </summary>
		public static readonly System.Guid DescriptionMetaAttributeGuid = new System.Guid(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem.DescriptionMetaAttributeGuidString);
		#endregion

		#region Description's Generated Property Code

		private System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// 
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(ISpySoft.SFSchemaLanguage.DomainModel.ConnnectionDescriptionTypeConverter))]
		[Microsoft.VisualStudio.Modeling.StringDomainAttribute]
		[Microsoft.VisualStudio.Modeling.MetaAttributeAttribute(FieldHandlerType=typeof(SchemaModelItemHasSchemaModelItemDescriptionFieldHandler))]
		[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem.DescriptionMetaAttributeGuidString, "SchemaModelItemHasSchemaModelItem.Description")]
		public  System.String Description
		{
			get
			{
				return descriptionPropertyStorage;
			}
		
			set
			{
				schemaModelItemHasSchemaModelItemDescriptionFieldHandler.SetFieldValue(this, value, false, Microsoft.VisualStudio.Modeling.TransactionManager.CommandFactory);
			}
		}
		#endregion

		#region SchemaModelItemHasSchemaModelItemDescriptionFieldHandler Generated Code
		/// <summary>
		/// FieldHandler for SchemaModelItemHasSchemaModelItem.Description field
		/// </summary>
		private static SchemaModelItemHasSchemaModelItemDescriptionFieldHandler	schemaModelItemHasSchemaModelItemDescriptionFieldHandler	= SchemaModelItemHasSchemaModelItemDescriptionFieldHandler.Instance;

		/// <summary>
		/// Implement the field handler for SchemaModelItemHasSchemaModelItem.Description
		/// </summary>
		[System.CLSCompliant(false)]
		public sealed partial class SchemaModelItemHasSchemaModelItemDescriptionFieldHandler : Microsoft.VisualStudio.Modeling.TypedModelElementInlineFieldHandler<ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem,System.String>
		{
			/// <summary>
			/// Constructor
			/// </summary>
			private SchemaModelItemHasSchemaModelItemDescriptionFieldHandler() { }

			/// <summary>
			/// Returns the singleton instance of the SchemaModelItemHasSchemaModelItem.Description field handler
			/// </summary>
			/// <value>SchemaModelItemHasSchemaModelItemDescriptionFieldHandler</value>
			public static SchemaModelItemHasSchemaModelItemDescriptionFieldHandler Instance
			{
				get
				{
					if (ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem.schemaModelItemHasSchemaModelItemDescriptionFieldHandler != null)
					{
						return ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem.schemaModelItemHasSchemaModelItemDescriptionFieldHandler;
					}
					else
					{
						// The static constructor in SchemaModelItemHasSchemaModelItem will assign this value to
						// ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem.schemaModelItemHasSchemaModelItemDescriptionFieldHandler, so just instantiate one and return it
						return new SchemaModelItemHasSchemaModelItemDescriptionFieldHandler();
					}
				}
			}

			/// <summary>
			/// Returns the meta attribute id for the SchemaModelItemHasSchemaModelItem.Description field handler
			/// </summary>
			/// <value>Guid</value>
			public sealed override System.Guid Id
			{
				get
				{
					return ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem.DescriptionMetaAttributeGuid;
				}
			}
			/// <summary>
			/// Gets the value of the attribute as it exists in the element
			/// </summary>
			/// <param name="element">the SchemaModelItemHasSchemaModelItem</param>
			protected sealed override System.String GetValue(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem element)
			{
				return element.descriptionPropertyStorage;
			}

			/// <summary>
			/// Sets the value into the element
			/// </summary>
			/// <param name="element">the element</param>
			/// <param name="value">new value</param>
			/// <param name="commandFactory">the command factory for this change</param>
			/// <param name="allowDuplicates">allow duplicate value to continue to fire rules and events</param>
			/// <param name="oldValue">the old value before the change</param>
			/// <returns>true if the value actually changed</returns>
			protected sealed override bool SetValue(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem element, System.String value, Microsoft.VisualStudio.Modeling.CommandFactory commandFactory, bool allowDuplicates, ref System.String oldValue)
			{
				oldValue = element.descriptionPropertyStorage;
				if (allowDuplicates || oldValue != value)
				{
					OnValueChanging(element, oldValue, value);
					element.descriptionPropertyStorage = value;
					OnValueChanged(element, oldValue, value);
					return true;
				}
				return false;
			}
		
		}
		#endregion
		#endregion
		
		#region SchemaModelItemTarget's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String SchemaModelItemTargetMetaRoleGuidString = "72314d31-07ff-4253-9eac-6436a4a7dafa";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid SchemaModelItemTargetMetaRoleGuid = new System.Guid(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem.SchemaModelItemTargetMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=true, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem.SchemaModelItemTargetMetaRoleGuidString, "SchemaModelItemHasSchemaModelItem.SchemaModelItemTarget")]
		public  ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem SchemaModelItemTarget
		{
			get { return (ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem)this.GetRolePlayer(SchemaModelItemTargetMetaRoleGuid); }
			set { this.SetRolePlayer(SchemaModelItemTargetMetaRoleGuid, value); }
		}
		
		#endregion
		#region SchemaModelItemSource's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String SchemaModelItemSourceMetaRoleGuidString = "b2324809-b120-456f-b597-ce9a1bac9305";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid SchemaModelItemSourceMetaRoleGuid = new System.Guid(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem.SchemaModelItemSourceMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=true, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem.SchemaModelItemSourceMetaRoleGuidString, "SchemaModelItemHasSchemaModelItem.SchemaModelItemSource")]
		public  ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem SchemaModelItemSource
		{
			get { return (ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItem)this.GetRolePlayer(SchemaModelItemSourceMetaRoleGuid); }
			set { this.SetRolePlayer(SchemaModelItemSourceMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region SchemaModelItemHasSchemaModelItem's Generated Constructor Code
	public  partial class SchemaModelItemHasSchemaModelItem
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SchemaModelItemHasSchemaModelItem(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SchemaModelItemHasSchemaModelItem CreateSchemaModelItemHasSchemaModelItem(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateSchemaModelItemHasSchemaModelItem(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SchemaModelItemHasSchemaModelItem CreateAndInitializeSchemaModelItemHasSchemaModelItem(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeSchemaModelItemHasSchemaModelItem(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public SchemaModelItemHasSchemaModelItem(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SchemaModelItemHasSchemaModelItem CreateSchemaModelItemHasSchemaModelItem(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (SchemaModelItemHasSchemaModelItem)partition.ElementFactory.CreateElementLink(typeof(SchemaModelItemHasSchemaModelItem), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static SchemaModelItemHasSchemaModelItem CreateAndInitializeSchemaModelItemHasSchemaModelItem(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (SchemaModelItemHasSchemaModelItem)partition.ElementFactory.CreateElementLink(typeof(SchemaModelItemHasSchemaModelItem), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for SchemaModelItemHasSchemaModelItem
	/// <summary>
	/// SchemaModelItemHasSchemaModelItem Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem))]
	public sealed class SchemaModelItemHasSchemaModelItemElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public SchemaModelItemHasSchemaModelItemElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static SchemaModelItemHasSchemaModelItemElementFactoryCreator Instance
		{
			get
			{
				return new SchemaModelItemHasSchemaModelItemElementFactoryCreator();
			}
		}
	}
	#endregion

}
namespace ISpySoft.SFSchemaLanguage.DomainModel
{
	/// <summary>
	/// 
	/// </summary>
	[System.CLSCompliant(true)]
	[System.Serializable]
	[Microsoft.VisualStudio.Modeling.MetaRelationship("678d8d2e-fe22-4992-919e-f3b5d3bd7c99")]
	[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.SFSchemaLanguage.DomainModel.ViewPointHasStakeholder.MetaRelationshipGuidString, "ViewPointHasStakeholder")]
	public  partial class ViewPointHasStakeholder : Microsoft.VisualStudio.Modeling.ElementLink
	{
		#region ViewPointHasStakeholder's Generated MetaRelationship Code
		/// <summary>
		/// MetaClass Guid String
		/// </summary>
		public new const System.String MetaClassGuidString = "a04f576e-9628-4548-bad6-214ebb7c613c";
		/// <summary>
		/// MetaClass Guid
		/// </summary>
		public static readonly new System.Guid MetaClassGuid = new System.Guid(ISpySoft.SFSchemaLanguage.DomainModel.ViewPointHasStakeholder.MetaClassGuidString);
		/// <summary>
		/// MetaRelationship Guid String
		/// </summary>
		public new const System.String MetaRelationshipGuidString = ViewPointHasStakeholder.MetaClassGuidString;
		/// <summary>
		/// MetaRelationship Guid
		/// </summary>
		public static readonly new System.Guid MetaRelationshipGuid = ViewPointHasStakeholder.MetaClassGuid;
		#endregion

		#region Stakeholders's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String StakeholdersMetaRoleGuidString = "7787fa13-a92f-4466-b859-56a7546128fa";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid StakeholdersMetaRoleGuid = new System.Guid(ISpySoft.SFSchemaLanguage.DomainModel.ViewPointHasStakeholder.StakeholdersMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=true, IsOrdered=true, IsAggregate=false, IsNavigableFrom=false, PropagateRemove=true, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.Many)]
		[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.SFSchemaLanguage.DomainModel.ViewPointHasStakeholder.StakeholdersMetaRoleGuidString, "ViewPointHasStakeholder.Stakeholders")]
		public  ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder Stakeholders
		{
			get { return (ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder)this.GetRolePlayer(StakeholdersMetaRoleGuid); }
			set { this.SetRolePlayer(StakeholdersMetaRoleGuid, value); }
		}
		
		#endregion
		#region ViewPoint's Generated MetaRole Code
		/// <summary>
		/// MetaRole Guid String
		/// </summary>
		public const System.String ViewPointMetaRoleGuidString = "beddb5bc-140b-4331-b3d8-c3fe08677dda";
		/// <summary>
		/// MetaRole Guid
		/// </summary>
		public static readonly System.Guid ViewPointMetaRoleGuid = new System.Guid(ISpySoft.SFSchemaLanguage.DomainModel.ViewPointHasStakeholder.ViewPointMetaRoleGuidString);
		/// <summary>
		/// 
		/// </summary>
		[Microsoft.VisualStudio.Modeling.MetaRole(IsOptional=true, IsOrdered=true, IsAggregate=true, IsNavigableFrom=false, PropagateRemove=false, PropagateCopy=false, Cardinality=Microsoft.VisualStudio.Modeling.Cardinality.One)]
		[Microsoft.VisualStudio.Modeling.MetaObject(ISpySoft.SFSchemaLanguage.DomainModel.ViewPointHasStakeholder.ViewPointMetaRoleGuidString, "ViewPointHasStakeholder.ViewPoint")]
		public  ISpySoft.SFSchemaLanguage.DomainModel.ViewPoint ViewPoint
		{
			get { return (ISpySoft.SFSchemaLanguage.DomainModel.ViewPoint)this.GetRolePlayer(ViewPointMetaRoleGuid); }
			set { this.SetRolePlayer(ViewPointMetaRoleGuid, value); }
		}
		
		#endregion
	}
	#region ViewPointHasStakeholder's Generated Constructor Code
	public  partial class ViewPointHasStakeholder
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ViewPointHasStakeholder(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.ModelDataBag bag) : base(store.DefaultPartition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ViewPointHasStakeholder CreateViewPointHasStakeholder(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return CreateViewPointHasStakeholder(store.DefaultPartition, rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ViewPointHasStakeholder CreateAndInitializeViewPointHasStakeholder(Microsoft.VisualStudio.Modeling.Store store, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return CreateAndInitializeViewPointHasStakeholder(store.DefaultPartition, rolePlayers, assignments);
		}
		/// <summary>
		/// Constructor
		/// </summary>
		public ViewPointHasStakeholder(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		    : base(partition, bag)
		{
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ViewPointHasStakeholder CreateViewPointHasStakeholder(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers)
		{
			return (ViewPointHasStakeholder)partition.ElementFactory.CreateElementLink(typeof(ViewPointHasStakeholder), rolePlayers);
		}
		/// <summary>
		/// Class Factory
		/// </summary>
		public static ViewPointHasStakeholder CreateAndInitializeViewPointHasStakeholder(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.RoleAssignment[] rolePlayers, Microsoft.VisualStudio.Modeling.AttributeAssignment[] assignments)
		{
			return (ViewPointHasStakeholder)partition.ElementFactory.CreateElementLink(typeof(ViewPointHasStakeholder), rolePlayers, assignments);
		}
	}
	#endregion
	#region Class Factory Creator for ViewPointHasStakeholder
	/// <summary>
	/// ViewPointHasStakeholder Class Factory Creator
	/// </summary>
	[Microsoft.VisualStudio.Modeling.ElementFactoryCreatorFor(typeof(ISpySoft.SFSchemaLanguage.DomainModel.ViewPointHasStakeholder))]
	public sealed class ViewPointHasStakeholderElementFactoryCreator : Microsoft.VisualStudio.Modeling.ElementFactoryCreator
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ViewPointHasStakeholderElementFactoryCreator()
		{
		}
		/// <summary>
		/// Class Factory Create Method
		/// </summary>
		public override Microsoft.VisualStudio.Modeling.ModelElement Create(Microsoft.VisualStudio.Modeling.Partition partition, Microsoft.VisualStudio.Modeling.ModelDataBag bag)
		{
			return new ISpySoft.SFSchemaLanguage.DomainModel.ViewPointHasStakeholder( partition, bag );
		}
		/// <summary>
		/// Create an instance of the createor object
		/// </summary>
		public static ViewPointHasStakeholderElementFactoryCreator Instance
		{
			get
			{
				return new ViewPointHasStakeholderElementFactoryCreator();
			}
		}
	}
	#endregion

}


