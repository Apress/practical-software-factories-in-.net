//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ISpySoft.SFSchemaLanguage.Designer
	{
	#region Using Directives
	using System;
	using System.Collections;
	using System.ComponentModel.Design;
	using System.Diagnostics;
	using System.Drawing;
	using System.Globalization;
	using System.Runtime.InteropServices;
	using System.Windows.Forms;
	using System.IO;			// for FileInfo, Path
	using Microsoft.VisualStudio.Modeling;
	using Microsoft.VisualStudio.Modeling.Validation;
	using Microsoft.VisualStudio.Modeling.Diagrams;
	using Microsoft.VisualStudio.EnterpriseTools.Shell;
	using Microsoft.VisualStudio.Shell;
	#endregion

	/// <summary>
	/// Commands supported by this designer
	/// </summary>
	internal class CommandSet : Microsoft.VisualStudio.Modeling.Utilities.CommandSet
	{
		#region Constructor
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="serviceProvider"></param>
		public CommandSet (IServiceProvider serviceProvider) : base(serviceProvider)
		{
		}
		#endregion

		/// <summary>
		/// Provide the menu commands that this command set handles
		/// </summary>
		/// <param name="commandList"></param>
		protected override void GetMenuCommands(IList commandList)
		{
			// Get the standard commands
			base.GetMenuCommands(commandList);

			// Add View Model Explorer command in the top-level menu.
			// Use a ContextBoundMenuCommand for this, because availability of the command is
			// based on whether or not the command context of our editor is active. 
			MenuCommand menuCommand = new CommandContextBoundMenuCommand(this.ServiceProvider, 
				new EventHandler(OnMenuViewModelExplorer), 
				new CommandID(GuidList.guidSFSchemaLanguageCmdSet, (int)PackageCommandIdList.cmdIdViewExplorer),
				GuidList.guidEditorFactory);

			commandList.Add(menuCommand);
			
			// Add validation menu command
			menuCommand = new DynamicStatusMenuCommand(new EventHandler(OnStatusValidate), new EventHandler(OnMenuValidate), CommonModelingCommands.ValidateModel);
			commandList.Add(menuCommand);
			
		}

		/// <summary>
		/// Show the Model Explorer
		/// </summary>
		/// <param name="sender">The source of the event</param>
		/// <param name="e">The event parameters</param>
		internal void OnMenuViewModelExplorer (object sender, EventArgs e)
		{
			SFSchemaLanguageModelExplorer explorer = this.ModelExplorer;
			if ( explorer != null )
			{
				explorer.Show();
			}
		}


		/// <summary>
		/// Status event handler for validating the model
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		internal void OnStatusValidate(object sender, EventArgs e)
		{
			MenuCommand cmd = sender as MenuCommand;
			cmd.Enabled = cmd.Visible = true;
		}

		/// <summary>
		/// Handler for validating the model
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		internal void OnMenuValidate(object sender, EventArgs e)
		{
			if (this.CurrentData != null && this.CurrentData.Store != null)
			{
				ValidationCategory category = ValidationCategory.Menu;
#if DEBUG
				category |= ValidationCategory.Debug;
#endif
				this.CurrentData.ValidationController.Validate(this.CurrentData.Store, category);
			}
		}


		/// <summary>
		/// Currently focused document
		/// </summary>
		internal SFSchemaLanguageDocData CurrentData
		{
			get
			{
				return this.MonitorSelection.CurrentDocument as SFSchemaLanguageDocData;
			}
		}

		/// <summary>
		/// Currently focused document view
		/// </summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
		internal SFSchemaLanguageDocView CurrentView
		{
			get
			{
				return base.CurrentDocView as SFSchemaLanguageDocView;
			}
		}

		/// <summary>
		/// Browser tool window.
		/// </summary>
		internal SFSchemaLanguageModelExplorer ModelExplorer
		{
			get
			{
				return base.ModelExplorerToolWindow as SFSchemaLanguageModelExplorer;
			}
		}

		/// <summary>
		/// Provide the concrete type that implements the model explorer in this designer
		/// </summary>
		/// <value>The model explorer's concrete type</value>
		protected override Type ModelExplorerType
		{
			get
			{
				return typeof(SFSchemaLanguageModelExplorer);
			}
		}
	}
}

