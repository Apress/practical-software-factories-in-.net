<#
/***************************************************************************
         Copyright (c) Microsoft Corporation, All rights reserved.             
    This code sample is provided "AS IS" without warranty of any kind, 
    it is not recommended for use in a production environment.
***************************************************************************/
#>
<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".dsldm" #>
<#@ definition processor="DDDirectiveProcessor" requires="fileName='..\Designer.dsldd'" #>
<#@ assembly name="System.Drawing.dll" #>
<#@ assembly name="System.Windows.Forms.dll" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Drawing" #>
<#@ import namespace="System.Windows.Forms" #><?xml version="1.0" encoding="utf-8"?>
<!--
<auto-generated>
    This code was generated by a tool.

    Changes to this file may cause incorrect behavior and will be lost if
    the code is regenerated.
</auto-generated>
-->
<dmd xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="urn:schemas-microsoft-com:dmd">
	<model name="<#=this.Definition.Name#>Designer" identity="38bf1796-1f42-4cd4-8a05-bcd0c862442e" id="i38bf1796z1f42z4cd4z8a05zbcd0c862442e" namespace="<#=this.Definition.Namespace#>" isLoaded="true">
		<mdfmetadata xsi:type="modelmdfmetadata" accessmodifier="public" category="" description="" doccomment="" localize="false" majorversion="1" minorversion="0" alwaysgeneratecollection="false">
			<copyright/>
			<stringtable resxfile="Designer.Resource.resx" resourcesfile="<#=this.Definition.Namespace#>.Diagram.Designer.Resource" usefullyqualifiedname="false"/>
			<copyclosure name="<#=this.Definition.Name#>DesignerCopyClosure" doccomment="Copy closure visitor filter"/>
			<removeclosure name="<#=this.Definition.Name#>DesignerRemoveClosure" doccomment="Remove closure visitor filter"/>
		</mdfmetadata>
		<extended>
			<model>i8dccb20azba4cz4f0ez97afz3d5101eb3e71</model>
			<model>i91d59b16ze488z4a28z8d51z59273ad5bf2e</model>
		</extended>
		<relationships />
		<trees>
			<treenavigator name="delete" identity="225bf8aa-f5fe-4893-b73f-f445dda863cb">
				<expressions>
				</expressions>
				<roots/>
			</treenavigator>
<#
			Dictionary<string, Guid> diagramGuids = new Dictionary<string, Guid>();
			Dictionary<string, Diagram> diagrams = new Dictionary<string, Diagram>();
			Dictionary<string, Guid> shapeGuids = new Dictionary<string, Guid>();
			Dictionary<string, Shape> shapes = new Dictionary<string,Shape>();
			Dictionary<string, Guid> connectorGuids = new Dictionary<string, Guid>();
			Dictionary<string, Connector> connectors = new Dictionary<string,Connector>();
			foreach (Diagram diagram in this.Definition.Notation.Diagrams)
			{
			    diagramGuids[diagram.Name] = Guid.NewGuid();
			    diagrams[diagram.Name] = diagram;
				foreach (Shape shape in diagram.Shapes)
				{
				    shapes[shape.Name] = shape;
					shapeGuids[shape.Name] = Guid.NewGuid();
				}
				foreach (Connector connector in diagram.Connectors)
				{
				    connectors[connector.Name] = connector;
					connectorGuids[connector.Name] = Guid.NewGuid();
				}
			}
			
			Dictionary<string, string> mels = new Dictionary<string, string>();
			Dictionary<string, string> diagramMels = new Dictionary<string, string>();
			
            foreach (DiagramMap diagramMap in this.Definition.Notation.DiagramMaps)
            {
            
                if (diagramMap.Class != null && diagramMap.Diagram != null)
                {
                    string diagramName = diagramMap.Diagram.Name;
                    diagramMels[diagramName]= diagramMap.Class.FullyQualifiedName;
                }
                
                foreach (ShapeMap shapeMap in diagramMap.ShapeMaps)
                { 
                    if (shapeMap.Class != null && shapeMap.Shape != null)
                    {
                        string shapeName = shapeMap.Shape.Name;
                        mels[shapeName] = shapeMap.Class.FullyQualifiedName;
                    }
                }
                foreach (ConnectorMap connectorMap in diagramMap.ConnectorMaps)
                { 
                    if (connectorMap.Class != null && connectorMap.Connector != null)
                    {
                        string connectorName = connectorMap.Connector.Name;
                        mels[connectorName] = connectorMap.Class.FullyQualifiedName;
                    }
                }
            }
            Guid treeGuid = Guid.NewGuid();
#>

			<treenavigator name="intrinsic" identity="<#=treeGuid.ToString()#>" id="<#=Microsoft.VisualStudio.Modeling.Utilities.GuidHelper.Encode(treeGuid)#>">
				<expressions>
<#
                        
			foreach (string shapeName in shapeGuids.Keys)
			{
#>
					<treeExpression xsi:type="InheritanceExpression" name="<#=shapeName#>-<#=shapes[shapeName].GetType().Name#>" identity="<#=Guid.NewGuid()#>" definitionlevel="none">
						<source />
						<superType><#=Microsoft.VisualStudio.Modeling.Utilities.GuidHelper.Encode(shapes[shapeName].MetaClassId)#></superType>
						<subType>i<#=shapeGuids[shapeName].ToString().Replace('-','z')#></subType>
					</treeExpression>
<#
            }
            
			foreach (string diagramBaseName in diagramGuids.Keys)
			{
			    string diagramName = diagramBaseName;
#>
					<treeExpression xsi:type="InheritanceExpression" name="<#=diagramName#>-<#=diagrams[diagramBaseName].GetType().Name#>" identity="<#=Guid.NewGuid()#>" definitionlevel="none">
						<source />
						<superType><#=Microsoft.VisualStudio.Modeling.Utilities.GuidHelper.Encode(diagrams[diagramBaseName].MetaClassId)#></superType>
						<subType>i<#=diagramGuids[diagramBaseName].ToString().Replace('-','z')#></subType>
					</treeExpression>
<#
            }
                        
			foreach (string connectorName in connectorGuids.Keys)
			{
#>
					<treeExpression xsi:type="InheritanceExpression" name="<#=connectorName#>-<#=connectors[connectorName].GetType().Name#>" identity="<#=Guid.NewGuid()#>" definitionlevel="none">
						<source />
						<superType><#=Microsoft.VisualStudio.Modeling.Utilities.GuidHelper.Encode(connectors[connectorName].MetaClassId)#></superType>
						<subType>i<#=connectorGuids[connectorName].ToString().Replace('-','z')#></subType>
					</treeExpression>
<#
            }
#>
				</expressions>
				<roots />
			</treenavigator>
			
			
			
			<treenavigator xsi:type="ShadowTreeNavigator" name="completeDiagram" identity="f9ad8fba-c1d5-48f6-ac62-7b1307720862" id="if9ad8fbazc1d5z48f6zac62z7b1307720862">
				<expressions>
<#
                        
			foreach (string shapeName in shapeGuids.Keys)
			{
#>
					<treeExpression xsi:type="InheritanceExpression" name="<#=shapeName#>-<#=shapes[shapeName].GetType().Name#>" identity="<#=Guid.NewGuid()#>" definitionlevel="definition">
						<source />
						<superType><#=Microsoft.VisualStudio.Modeling.Utilities.GuidHelper.Encode(shapes[shapeName].MetaClassId)#></superType>
						<subType>i<#=shapeGuids[shapeName].ToString().Replace('-','z')#></subType>
					</treeExpression>
<#
            }
            
			foreach (string diagramBaseName in diagramGuids.Keys)
			{
			    string diagramName = diagramBaseName;
#>
					<treeExpression xsi:type="InheritanceExpression" name="<#=diagramName#>-<#=diagrams[diagramBaseName].GetType().Name#>" identity="<#=Guid.NewGuid()#>" definitionlevel="definition">
						<source />
						<superType><#=Microsoft.VisualStudio.Modeling.Utilities.GuidHelper.Encode(diagrams[diagramBaseName].MetaClassId)#></superType>
						<subType>i<#=diagramGuids[diagramBaseName].ToString().Replace('-','z')#></subType>
					</treeExpression>
<#
            }
                        
			foreach (string connectorName in connectorGuids.Keys)
			{
#>
					<treeExpression xsi:type="InheritanceExpression" name="<#=connectorName#>-<#=connectors[connectorName].GetType().Name#>" identity="<#=Guid.NewGuid()#>" definitionlevel="definition">
						<source />
						<superType><#=Microsoft.VisualStudio.Modeling.Utilities.GuidHelper.Encode(connectors[connectorName].MetaClassId)#></superType>
						<subType>i<#=connectorGuids[connectorName].ToString().Replace('-','z')#></subType>
					</treeExpression>
<#
            }
#>
				
				</expressions>
				<roots>
					<# { Guid newGuid = Guid.NewGuid(); #>
					<root name="Diagram" identity="<#=newGuid.ToString()#>" id="<#=Microsoft.VisualStudio.Modeling.Utilities.GuidHelper.Encode(newGuid)#>">
						<source />
						<referencetype><#=Microsoft.VisualStudio.Modeling.Utilities.GuidHelper.Encode(Diagram.MetaClassGuid)#></referencetype>
					</root>
					<# } { Guid newGuid = Guid.NewGuid(); #>
					<root name="Connector"> identity="<#=newGuid.ToString()#>" id="<#=Microsoft.VisualStudio.Modeling.Utilities.GuidHelper.Encode(newGuid)#>">
						<source />
						<referencetype><#=Microsoft.VisualStudio.Modeling.Utilities.GuidHelper.Encode(Connector.MetaClassGuid)#></referencetype>
					</root>
					<# } { Guid newGuid = Guid.NewGuid(); #>
					<root name="GeometryShape"> identity="<#=newGuid.ToString()#>"  id="<#=Microsoft.VisualStudio.Modeling.Utilities.GuidHelper.Encode(newGuid)#>">
						<source />
						<referencetype><#=Microsoft.VisualStudio.Modeling.Utilities.GuidHelper.Encode(GeometryShape.MetaClassGuid)#></referencetype>
					</root>
					<# } { Guid newGuid = Guid.NewGuid(); #>
					<root name="CompartmentShape"> identity="<#=newGuid.ToString()#>"  id="<#=Microsoft.VisualStudio.Modeling.Utilities.GuidHelper.Encode(newGuid)#>">
						<source />
						<referencetype><#=Microsoft.VisualStudio.Modeling.Utilities.GuidHelper.Encode(CompartmentShape.MetaClassGuid)#></referencetype>
					</root>
					<# } { Guid newGuid = Guid.NewGuid(); #>
					<root name="ImageShape"> identity="<#=newGuid.ToString()#>"  id="<#=Microsoft.VisualStudio.Modeling.Utilities.GuidHelper.Encode(newGuid)#>">
						<source />
						<referencetype><#=Microsoft.VisualStudio.Modeling.Utilities.GuidHelper.Encode(ImageShape.MetaClassGuid)#></referencetype>
					</root>
					<# } #>
				</roots>
				<source><#=Microsoft.VisualStudio.Modeling.Utilities.GuidHelper.Encode(treeGuid)#></source>
			</treenavigator>
			
			<# Guid serializationTreeGuid = Guid.NewGuid(); #>
			<treenavigator xsi:type="ShadowTreeNavigator" name="serialization" identity="<#=serializationTreeGuid.ToString()#>" id="<#=Microsoft.VisualStudio.Modeling.Utilities.GuidHelper.Encode(serializationTreeGuid)#>">
				<expressions />
				<roots />
				<source><#=Microsoft.VisualStudio.Modeling.Utilities.GuidHelper.Encode(treeGuid)#></source>				
			</treenavigator>
			
			
			<# Guid deleteTreeGuid = Guid.NewGuid(); #>
			<treenavigator xsi:type="ShadowTreeNavigator" name="delete" identity="<#=deleteTreeGuid.ToString()#>" id="<#=Microsoft.VisualStudio.Modeling.Utilities.GuidHelper.Encode(deleteTreeGuid)#>">
				<expressions />
				<roots />
				<source><#=Microsoft.VisualStudio.Modeling.Utilities.GuidHelper.Encode(treeGuid)#></source>
			</treenavigator>
			
		</trees>
		
		
		<concepts>
		</concepts>
		<shapes>
			<shape name="GeometryShape" identity="<#=GeometryShape.MetaClassGuid#>" namespace="Microsoft.VisualStudio.Modeling.Utilities" id="<#=Microsoft.VisualStudio.Modeling.Utilities.GuidHelper.Encode(GeometryShape.MetaClassGuid)#>" isLoaded="false" isAbstract="true">
				<mdfmetadata xsi:type="conceptorshapemdfmetadata" accessmodifier="public" category="" description="" doccomment="" localize="false"/>
				<concepts/>
			</shape>
			<shape name="CompartmentShape" identity="<#=CompartmentShape.MetaClassGuid#>" namespace="Microsoft.VisualStudio.Modeling.Utilities" id="<#=Microsoft.VisualStudio.Modeling.Utilities.GuidHelper.Encode(CompartmentShape.MetaClassGuid)#>" isLoaded="false" isAbstract="true">
				<mdfmetadata xsi:type="conceptorshapemdfmetadata" accessmodifier="public" category="" description="" doccomment="" localize="false"/>
				<concepts/>
			</shape>
			<shape name="ImageShape" identity="<#=ImageShape.MetaClassGuid#>" namespace="Microsoft.VisualStudio.Modeling.Utilities" id="<#=Microsoft.VisualStudio.Modeling.Utilities.GuidHelper.Encode(ImageShape.MetaClassGuid)#>" isLoaded="false" isAbstract="true">
				<mdfmetadata xsi:type="conceptorshapemdfmetadata" accessmodifier="public" category="" description="" doccomment="" localize="false"/>
				<concepts/>
			</shape>
			<shape name="Connector" identity="<#=Connector.MetaClassGuid#>" namespace="Microsoft.VisualStudio.Modeling.Utilities" id="<#=Microsoft.VisualStudio.Modeling.Utilities.GuidHelper.Encode(Connector.MetaClassGuid)#>" isLoaded="false" isAbstract="true">
				<mdfmetadata xsi:type="conceptorshapemdfmetadata" accessmodifier="public" category="" description="" doccomment="" localize="false"/>
				<concepts/>
			</shape>
			<shape xsi:type="Diagram" name="Diagram" identity="<#=Diagram.MetaClassGuid#>" namespace="Microsoft.VisualStudio.Modeling.Utilities" id="<#=Microsoft.VisualStudio.Modeling.Utilities.GuidHelper.Encode(Diagram.MetaClassGuid)#>" isLoaded="false" isAbstract="true">
				<mdfmetadata xsi:type="conceptorshapemdfmetadata" accessmodifier="public" category="" description="" doccomment="" localize="false">
				</mdfmetadata>
			</shape>
<#
			// -------------------------
			// Generate shapes
			// -------------------------
    		foreach (string shapeName in shapeGuids.Keys)
			{
#>
			<shape name="<#=shapeName#>" identity="<#=shapeGuids[shapeName].ToString()#>" namespace="<#=this.Definition.Namespace#>" id="<#=Microsoft.VisualStudio.Modeling.Utilities.GuidHelper.Encode(shapeGuids[shapeName])#>" isLoaded="true" isAbstract="false">
				<mdfmetadata xsi:type="conceptorshapemdfmetadata" accessmodifier="public" category="" description="" doccomment="" localize="false">
<#
			if(mels.ContainsKey(shapeName))
			{
#>
					<clrattribute name="Microsoft.VisualStudio.Modeling.ShapeFor" parametertext="typeof(<#=mels[shapeName]#>)"/>
<#
			}

                foreach (string diagramBaseName in diagramGuids.Keys)
                {
                    string diagramName = diagramBaseName;
                    
                    // if there is a toolbox item in this diagram for this shape
                    foreach (object x in diagrams[diagramBaseName].Toolbox.Items)
                    {
						ShapeTool tool = x as ShapeTool;
                        if (tool != null && tool.Shape == shapes[shapeName]) 
                        {
#>
					<clrattribute name="System.ComponentModel.ToolboxItemFilterAttribute" parametertext="<#=diagramName#>.DiagramFilterString, System.ComponentModel.ToolboxItemFilterType.Require"/>
					<toolboxitem toolboxitemid="<#=diagramBaseName + shapeName#>" position="<#=tool.Order#>" bitmapresourceid="<#=tool.IconId#>" captionresourceid="<#=tool.CaptionId#>" tooltipresourceid="<#=tool.CaptionId#>" toolboxtab="ToolboxTab" cshkeywordid="<#=tool.ContextSensitiveHelpId#>"/>
<#
                            break;
                        }
                    }
                }
                
#>
				</mdfmetadata>
				<superType><#=Microsoft.VisualStudio.Modeling.Utilities.GuidHelper.Encode(shapes[shapeName].MetaClassId)#></superType>
				<concepts/>
			</shape>
<#
            }
#>
<#
			// -------------------------
			// Generate connectors
			// -------------------------
    		foreach (string connectorName in connectorGuids.Keys)
			{
#>
			<shape name="<#=connectorName#>" identity="<#=connectorGuids[connectorName].ToString()#>" namespace="<#=this.Definition.Namespace#>" id="i<#=connectorGuids[connectorName].ToString().Replace('-','z')#>" isLoaded="true" isAbstract="false">
				<mdfmetadata xsi:type="conceptorshapemdfmetadata" accessmodifier="public" category="" description="" doccomment="" localize="false">
<#
			if(mels.ContainsKey(connectorName))
			{
#>
					<clrattribute name="Microsoft.VisualStudio.Modeling.ShapeFor" parametertext="typeof(<#=mels[connectorName]#>)"/>
<#
			}
                foreach (string diagramBaseName in diagramGuids.Keys)
                {
                    string diagramName = diagramBaseName;
                    
                    // if there is a toolbox item in this diagram for this shape
                    bool foundToolForThisConnector= false;
                    foreach (object x in diagrams[diagramBaseName].Toolbox.Items)
                    { ConnectorTool tool = x as ConnectorTool;
                        
                        if (tool != null && tool.Connector == connectors[connectorName]) 
                        {
                            foundToolForThisConnector = true;
                            break; 
                        }
                    }
                    if (foundToolForThisConnector)
                    {
#>
					<clrattribute name="System.ComponentModel.ToolboxItemFilterAttribute" parametertext="<#=diagramName#>.DiagramFilterString, System.ComponentModel.ToolboxItemFilterType.Require"/>
<#
                    }
                }
#>
   				</mdfmetadata>
				<superType><#=Microsoft.VisualStudio.Modeling.Utilities.GuidHelper.Encode(connectors[connectorName].MetaClassId)#></superType>
				<concepts/>
			</shape>
<#
            }

			// -------------------------
			// Generate diagrams
			// -------------------------
    		foreach (string diagramBaseName in diagramGuids.Keys)
			{
    			string diagramName = diagramBaseName;
#>
			<shape xsi:type="Diagram" name="<#=diagramName#>" identity="<#=diagramGuids[diagramBaseName].ToString()#>" namespace="<#=this.Definition.Namespace#>" id="i<#=diagramGuids[diagramBaseName].ToString().Replace('-','z')#>" isLoaded="true" isAbstract="false">
				<mdfmetadata xsi:type="conceptorshapemdfmetadata" accessmodifier="public" category="" description="" doccomment="" localize="false">
					<clrattribute name="Microsoft.VisualStudio.Modeling.ShapeFor" parametertext="typeof(<#=diagramMels[diagramBaseName]#>)"/>
					<clrattribute name="System.ComponentModel.ToolboxItemFilterAttribute" parametertext="<#=diagramName#>.DiagramFilterString, System.ComponentModel.ToolboxItemFilterType.Require"/>
				</mdfmetadata>
				<superType><#=Microsoft.VisualStudio.Modeling.Utilities.GuidHelper.Encode(diagrams[diagramBaseName].MetaClassId)#></superType>
			</shape>
<#
            }
            
#>
		</shapes>
	</model>
	<model name="" identity="8dccb20a-ba4c-4f0e-97af-3d5101eb3e71" id="i8dccb20azba4cz4f0ez97afz3d5101eb3e71" namespace="" isLoaded="false">
		<mdfmetadata xsi:type="modelmdfmetadata" accessmodifier="public" category="" description="" doccomment="" localize="false" majorversion="1" minorversion="0" alwaysgeneratecollection="false">
			<copyright/>
			<copyclosure name="CopyClosure" classmodifier="sealed" doccomment="Copy closure visitor filter"/>
			<removeclosure name="RemoveClosure" classmodifier="sealed" doccomment="Remove closure visitor filter"/>
		</mdfmetadata>
		<extended/>
	</model>
	<model name="CDS" identity="91d59b16-e488-4a28-8d51-59273ad5bf2e" id="i91d59b16ze488z4a28z8d51z59273ad5bf2e" namespace="" isLoaded="false">
		<mdfmetadata xsi:type="modelmdfmetadata" accessmodifier="public" category="" description="" doccomment="" localize="false" majorversion="1" minorversion="0" alwaysgeneratecollection="false">
			<copyright/>
			<copyclosure name="CDSCopyClosure" classmodifier="sealed" doccomment="Copy closure visitor filter"/>
			<removeclosure name="CDSRemoveClosure" classmodifier="sealed" doccomment="Remove closure visitor filter"/>
		</mdfmetadata>
		<extended/>
	</model>
</dmd>
