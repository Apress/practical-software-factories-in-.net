//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ISpySoft.SFSchemaLanguage.Designer
{
    #region Using directives

	using System;
	using System.Collections.Generic;
	using Microsoft.VisualStudio.Modeling;
	using System.Diagnostics;
	using Microsoft.VisualStudio.Modeling.Utilities;
	using System.Drawing;
	using Microsoft.VisualStudio.Modeling.Diagrams;

	#endregion
	/// <summary>
	/// Partial class for shape with some overrides
	/// </summary>
	public partial class ActivityShape 
	{    
		#region Static data
        private static string ResourceOrId(string id)
        {
			string text = ISpySoft.SFSchemaLanguage.Designer.Diagram.Designer_Resource.ResourceManager.GetString(id, ISpySoft.SFSchemaLanguage.Designer.Diagram.Designer_Resource.Culture);
			return text == null ? id : text;        		
        }
        private readonly static DecoratorDescription[] decoratorDescriptions = { 
        		
				new Microsoft.VisualStudio.Modeling.Utilities.TextShapeDecoratorDescription("Name", ShapeDecoratorPosition.Center, ResourceOrId("ActivityShapeNameDecorator")),
	    	    };
	    	    
    	private readonly static DecoratorMapping[] decoratorMappings = {
			new SimpleDecoratorMapping("Name", Microsoft.VisualStudio.Modeling.NamedElement.NameMetaAttributeGuidString),

		};

		#endregion
		        
		        
		#region Toolbox support
		/// <summary>
		/// Create a serialized prototype for Activity to attach to the toolbox.
		/// </summary>
		/// <param name="toolboxItem"></param>
		/// <returns>The prototype</returns>
		public override ElementGroupPrototype InitializeToolboxItem(ModelingToolboxItem toolboxItem)
		{
			ElementGroup elementGroup = new ElementGroup(this.Store);
			ElementGroupPrototype proto = null;

			Debug.Assert(this.Store.TransactionManager.InTransaction, "Must be in transaction");

			ISpySoft.SFSchemaLanguage.DomainModel.Activity instance = ISpySoft.SFSchemaLanguage.DomainModel.Activity.CreateActivity(this.Store);

			if (instance != null)
			{
				elementGroup.AddGraph(instance);

				proto = elementGroup.CreatePrototype(instance);
			}
			return proto;
		}
		#endregion

		#region Decorators
		public override DecoratorDescription[] GetDecoratorDescriptions()
		{
			return ActivityShape.decoratorDescriptions;
		}

		public override DecoratorMapping[] GetDecoratorMappings()
		{
			return ActivityShape.decoratorMappings;
		}
		#endregion

		#region Visual settings
		/// <summary>
		/// Provide the specific geometry for the shape
		/// </summary>
		/// <value></value>
		public override ShapeGeometry ShapeGeometry
		{
			get
			{
				return ShapeGeometries.RoundedRectangle;
			}
		}		

		/// <summary>
		/// The initial size of the shape
		/// </summary>
		/// <value></value>
		public override Microsoft.VisualStudio.Modeling.Diagrams.SizeD DefaultSize
		{
			get { return new SizeD(1.1, 0.45); }
		}

		private Color fillColorStorage = System.Drawing.Color.LightBlue;
		/// <summary>
		/// FillColorStorage
		/// </summary>
		/// <remarks>
		/// FillColor is a modifiable property, hence it has backing store
		/// </remarks>
		/// <value>The fill color</value>
		[Variability(Variability.User)]
		protected override Color FillColorStorage
		{
			get
			{
				return fillColorStorage;
			}
			set
			{
				this.fillColorStorage = value;
			}
		}
		private Color outlineColorStorage = System.Drawing.Color.Black;
		/// <summary>
		/// OutlineColorStorage
		/// </summary>
		/// <remarks>
		/// OutlineColor is a modifiable property, hence it has backing store
		/// </remarks>
		/// <value>The outline color</value>
		[Variability(Variability.User)]
		protected override Color OutlineColorStorage
		{
			get
			{
				return outlineColorStorage;
			}
			set
			{
				this.outlineColorStorage = value;
			}
		}
		#endregion
    }
	/// <summary>
	/// Partial class for shape with some overrides
	/// </summary>
	public partial class ArtifactShape 
	{    
		#region Static data
        private static string ResourceOrId(string id)
        {
			string text = ISpySoft.SFSchemaLanguage.Designer.Diagram.Designer_Resource.ResourceManager.GetString(id, ISpySoft.SFSchemaLanguage.Designer.Diagram.Designer_Resource.Culture);
			return text == null ? id : text;        		
        }
        private readonly static DecoratorDescription[] decoratorDescriptions = { 
        		
				new Microsoft.VisualStudio.Modeling.Utilities.TextShapeDecoratorDescription("Name", ShapeDecoratorPosition.InnerBottomCenter, ResourceOrId("ArtifactShapeNameDecorator")),
	    				new Microsoft.VisualStudio.Modeling.Utilities.IconShapeDecoratorDescription("AssetIcon", ShapeDecoratorPosition.InnerTopCenter, ImageHelper.GetImage(EditorFactory.GetResource("AssetIconFile"))),
	    				new Microsoft.VisualStudio.Modeling.Utilities.IconShapeDecoratorDescription("ToolIcon", ShapeDecoratorPosition.InnerTopCenter, ImageHelper.GetImage(EditorFactory.GetResource("ToolIconFile"))),
	    				new Microsoft.VisualStudio.Modeling.Utilities.IconShapeDecoratorDescription("WorkProductIcon", ShapeDecoratorPosition.InnerTopCenter, ImageHelper.GetImage(EditorFactory.GetResource("WorkProductIconFile"))),
	    	    };
	    	    
    	private readonly static DecoratorMapping[] decoratorMappings = {
			new SimpleDecoratorMapping("Name", Microsoft.VisualStudio.Modeling.NamedElement.NameMetaAttributeGuidString),

			new OneWayEnumerationDecoratorMapping("AssetIcon", ISpySoft.SFSchemaLanguage.DomainModel.Artifact.TypeMetaAttributeGuidString, new System.Enum[] { 
				ISpySoft.SFSchemaLanguage.DomainModel.ArtifactType.Asset,
				}),
			new OneWayEnumerationDecoratorMapping("ToolIcon", ISpySoft.SFSchemaLanguage.DomainModel.Artifact.TypeMetaAttributeGuidString, new System.Enum[] { 
				ISpySoft.SFSchemaLanguage.DomainModel.ArtifactType.Tool,
				}),
			new OneWayEnumerationDecoratorMapping("WorkProductIcon", ISpySoft.SFSchemaLanguage.DomainModel.Artifact.TypeMetaAttributeGuidString, new System.Enum[] { 
				ISpySoft.SFSchemaLanguage.DomainModel.ArtifactType.WorkProduct,
				}),
		};

		#endregion
		        
		        
		#region Toolbox support
		/// <summary>
		/// Create a serialized prototype for Artifact to attach to the toolbox.
		/// </summary>
		/// <param name="toolboxItem"></param>
		/// <returns>The prototype</returns>
		public override ElementGroupPrototype InitializeToolboxItem(ModelingToolboxItem toolboxItem)
		{
			ElementGroup elementGroup = new ElementGroup(this.Store);
			ElementGroupPrototype proto = null;

			Debug.Assert(this.Store.TransactionManager.InTransaction, "Must be in transaction");

			ISpySoft.SFSchemaLanguage.DomainModel.Artifact instance = ISpySoft.SFSchemaLanguage.DomainModel.Artifact.CreateArtifact(this.Store);

			if (instance != null)
			{
				elementGroup.AddGraph(instance);

				proto = elementGroup.CreatePrototype(instance);
			}
			return proto;
		}
		#endregion

		#region Decorators
		public override DecoratorDescription[] GetDecoratorDescriptions()
		{
			return ArtifactShape.decoratorDescriptions;
		}

		public override DecoratorMapping[] GetDecoratorMappings()
		{
			return ArtifactShape.decoratorMappings;
		}
		#endregion

		#region Visual settings
		/// <summary>
		/// Provide the specific geometry for the shape
		/// </summary>
		/// <value></value>
		public override ShapeGeometry ShapeGeometry
		{
			get
			{
				return ShapeGeometries.Rectangle;
			}
		}		

		/// <summary>
		/// The initial size of the shape
		/// </summary>
		/// <value></value>
		public override Microsoft.VisualStudio.Modeling.Diagrams.SizeD DefaultSize
		{
			get { return new SizeD(1.1, 0.45); }
		}

		private Color fillColorStorage = System.Drawing.Color.Lime;
		/// <summary>
		/// FillColorStorage
		/// </summary>
		/// <remarks>
		/// FillColor is a modifiable property, hence it has backing store
		/// </remarks>
		/// <value>The fill color</value>
		[Variability(Variability.User)]
		protected override Color FillColorStorage
		{
			get
			{
				return fillColorStorage;
			}
			set
			{
				this.fillColorStorage = value;
			}
		}
		private Color outlineColorStorage = System.Drawing.Color.Black;
		/// <summary>
		/// OutlineColorStorage
		/// </summary>
		/// <remarks>
		/// OutlineColor is a modifiable property, hence it has backing store
		/// </remarks>
		/// <value>The outline color</value>
		[Variability(Variability.User)]
		protected override Color OutlineColorStorage
		{
			get
			{
				return outlineColorStorage;
			}
			set
			{
				this.outlineColorStorage = value;
			}
		}
		#endregion
    }
	/// <summary>
	/// Partial class for shape with some overrides
	/// </summary>
	public partial class MappingShape 
	{    
		#region Static data
        private static string ResourceOrId(string id)
        {
			string text = ISpySoft.SFSchemaLanguage.Designer.Diagram.Designer_Resource.ResourceManager.GetString(id, ISpySoft.SFSchemaLanguage.Designer.Diagram.Designer_Resource.Culture);
			return text == null ? id : text;        		
        }
        private readonly static DecoratorDescription[] decoratorDescriptions = { 
        		
				new Microsoft.VisualStudio.Modeling.Utilities.TextShapeDecoratorDescription("Name", ShapeDecoratorPosition.Center, ResourceOrId("MappingShapeNameDecorator")),
	    	    };
	    	    
    	private readonly static DecoratorMapping[] decoratorMappings = {
			new SimpleDecoratorMapping("Name", Microsoft.VisualStudio.Modeling.NamedElement.NameMetaAttributeGuidString),

		};

		#endregion
		        
		        
		#region Toolbox support
		/// <summary>
		/// Create a serialized prototype for Mapping to attach to the toolbox.
		/// </summary>
		/// <param name="toolboxItem"></param>
		/// <returns>The prototype</returns>
		public override ElementGroupPrototype InitializeToolboxItem(ModelingToolboxItem toolboxItem)
		{
			ElementGroup elementGroup = new ElementGroup(this.Store);
			ElementGroupPrototype proto = null;

			Debug.Assert(this.Store.TransactionManager.InTransaction, "Must be in transaction");

			ISpySoft.SFSchemaLanguage.DomainModel.Mapping instance = ISpySoft.SFSchemaLanguage.DomainModel.Mapping.CreateMapping(this.Store);

			if (instance != null)
			{
				elementGroup.AddGraph(instance);

				proto = elementGroup.CreatePrototype(instance);
			}
			return proto;
		}
		#endregion

		#region Decorators
		public override DecoratorDescription[] GetDecoratorDescriptions()
		{
			return MappingShape.decoratorDescriptions;
		}

		public override DecoratorMapping[] GetDecoratorMappings()
		{
			return MappingShape.decoratorMappings;
		}
		#endregion

		#region Visual settings
		/// <summary>
		/// Provide the specific geometry for the shape
		/// </summary>
		/// <value></value>
		public override ShapeGeometry ShapeGeometry
		{
			get
			{
				return ShapeGeometries.RoundedRectangle;
			}
		}		

		/// <summary>
		/// The initial size of the shape
		/// </summary>
		/// <value></value>
		public override Microsoft.VisualStudio.Modeling.Diagrams.SizeD DefaultSize
		{
			get { return new SizeD(1.1, 0.45); }
		}

		private Color fillColorStorage = System.Drawing.Color.DarkOrange;
		/// <summary>
		/// FillColorStorage
		/// </summary>
		/// <remarks>
		/// FillColor is a modifiable property, hence it has backing store
		/// </remarks>
		/// <value>The fill color</value>
		[Variability(Variability.User)]
		protected override Color FillColorStorage
		{
			get
			{
				return fillColorStorage;
			}
			set
			{
				this.fillColorStorage = value;
			}
		}
		private Color outlineColorStorage = System.Drawing.Color.Black;
		/// <summary>
		/// OutlineColorStorage
		/// </summary>
		/// <remarks>
		/// OutlineColor is a modifiable property, hence it has backing store
		/// </remarks>
		/// <value>The outline color</value>
		[Variability(Variability.User)]
		protected override Color OutlineColorStorage
		{
			get
			{
				return outlineColorStorage;
			}
			set
			{
				this.outlineColorStorage = value;
			}
		}
		#endregion
    }
	/// <summary>
	/// Partial class for shape with some overrides
	/// </summary>
	public partial class ViewPointShape 
	{    
		#region Static data
        private static string ResourceOrId(string id)
        {
			string text = ISpySoft.SFSchemaLanguage.Designer.Diagram.Designer_Resource.ResourceManager.GetString(id, ISpySoft.SFSchemaLanguage.Designer.Diagram.Designer_Resource.Culture);
			return text == null ? id : text;        		
        }
        private readonly static DecoratorDescription[] decoratorDescriptions = { 
        		
				new Microsoft.VisualStudio.Modeling.Utilities.TextShapeDecoratorDescription("Name", ShapeDecoratorPosition.Center, ResourceOrId("ViewPointShapeNameDecorator")),
	    				new Microsoft.VisualStudio.Modeling.Utilities.ExpandCollapseDecoratorDescription("ExpandCollapse", ShapeDecoratorPosition.InnerTopRight),
	    	    };
	    	    
    	private readonly static DecoratorMapping[] decoratorMappings = {
			new SimpleDecoratorMapping("Name", Microsoft.VisualStudio.Modeling.NamedElement.NameMetaAttributeGuidString),

		};

		private readonly static CompartmentDescription[] compartmentDescriptions = {
			new Microsoft.VisualStudio.Modeling.Utilities.ListCompartmentDescription(
					"StakeholderCompartment", ResourceOrId("StakeholderCompartmentCaption"), 
					System.Drawing.Color.LightGray, Variability.Fixed, 
					System.Drawing.Color.White, Variability.Fixed),
		};
		
    	private readonly static CompartmentMapping[] compartmentMappings = {
			new Microsoft.VisualStudio.Modeling.Utilities.ListCompartmentMapping(
					"StakeholderCompartment", 
					Microsoft.VisualStudio.Modeling.NamedElement.NameMetaAttributeGuidString,
					typeof(ISpySoft.SFSchemaLanguage.DomainModel.ViewPointHasStakeholder), 
					ISpySoft.SFSchemaLanguage.DomainModel.ViewPointHasStakeholder.StakeholdersMetaRoleGuidString,
					ISpySoft.SFSchemaLanguage.DomainModel.ViewPointHasStakeholder.ViewPointMetaRoleGuidString,
					ISpySoft.SFSchemaLanguage.DomainModel.Stakeholder.MetaClassGuidString),
		};
		#endregion
		        
		        
		#region Toolbox support
		/// <summary>
		/// Create a serialized prototype for ViewPoint to attach to the toolbox.
		/// </summary>
		/// <param name="toolboxItem"></param>
		/// <returns>The prototype</returns>
		public override ElementGroupPrototype InitializeToolboxItem(ModelingToolboxItem toolboxItem)
		{
			ElementGroup elementGroup = new ElementGroup(this.Store);
			ElementGroupPrototype proto = null;

			Debug.Assert(this.Store.TransactionManager.InTransaction, "Must be in transaction");

			ISpySoft.SFSchemaLanguage.DomainModel.ViewPoint instance = ISpySoft.SFSchemaLanguage.DomainModel.ViewPoint.CreateViewPoint(this.Store);

			if (instance != null)
			{
				elementGroup.AddGraph(instance);

				proto = elementGroup.CreatePrototype(instance);
			}
			return proto;
		}
		#endregion

		#region Decorators
		public override DecoratorDescription[] GetDecoratorDescriptions()
		{
			return ViewPointShape.decoratorDescriptions;
		}

		public override DecoratorMapping[] GetDecoratorMappings()
		{
			return ViewPointShape.decoratorMappings;
		}
		#endregion

		#region Compartments
		public override CompartmentDescription[] GetCompartmentDescriptions()
		{
			return ViewPointShape.compartmentDescriptions;
		}

		public override CompartmentMapping[] GetCompartmentMappings()
		{
			return ViewPointShape.compartmentMappings;
		}

		/// <summary>
		/// Gets whether compartment header should be visible if there is only one of them.
		/// </summary>
		public override bool IsSingleCompartmentHeaderVisible
		{
			get { return true; }
		}
		#endregion
		#region Visual settings
		/// <summary>
		/// The initial size of the shape
		/// </summary>
		/// <value></value>
		public override Microsoft.VisualStudio.Modeling.Diagrams.SizeD DefaultSize
		{
			get { return new SizeD(1.1, 0.45); }
		}
		/// <summary>
		/// Provide the specific geometry for the shape
		/// </summary>
		/// <value></value>
		public override ShapeGeometry ShapeGeometry
		{
			get
			{
				return ShapeGeometries.Rectangle;
			}
		}		
		private Color fillColorStorage = System.Drawing.Color.Crimson;
		/// <summary>
		/// FillColorStorage
		/// </summary>
		/// <remarks>
		/// FillColor is a modifiable property, hence it has backing store
		/// </remarks>
		/// <value>The fill color</value>
		[Variability(Variability.User)]
		protected override Color FillColorStorage
		{
			get
			{
				return fillColorStorage;
			}
			set
			{
				this.fillColorStorage = value;
			}
		}
		private Color outlineColorStorage = System.Drawing.Color.Black;
		/// <summary>
		/// OutlineColorStorage
		/// </summary>
		/// <remarks>
		/// OutlineColor is a modifiable property, hence it has backing store
		/// </remarks>
		/// <value>The outline color</value>
		[Variability(Variability.User)]
		protected override Color OutlineColorStorage
		{
			get
			{
				return outlineColorStorage;
			}
			set
			{
				this.outlineColorStorage = value;
			}
		}
		#endregion
    }
}

