//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

	
namespace ISpySoft.SFSchemaLanguage.Designer
{
	#region Using directives

	using System;
	using System.Collections.Generic;
	using System.Text;
	using Microsoft.VisualStudio.Modeling.Utilities;
	using Microsoft.VisualStudio.Modeling;
	using Microsoft.VisualStudio.Modeling.Diagrams;

	#endregion

	public partial class SFSchemaLanguageDiagram
	{
		#region Constants
		public const string DiagramFilterString = "SFSchemaLanguageDiagram";
		#endregion

		#region Fields
		/// <summary>
		/// Connect action for SchemaModelItemHasSchemaModelItemConnector
		/// </summary>
		[NonSerialized]
		private SchemaModelItemHasSchemaModelItemConnectorConnectAction schemamodelitemhasschemamodelitemconnectorConnectAction;


		#endregion
	
		#region View Fixup

		/// <summary>
		/// Check whether shapes should be added for a particular element
		/// </summary>
		/// <remarks>
		/// Base class provides test when a drag-drop is performed.  This override provides the
		/// test for when reverse-engineering (load) happens.
		/// </remarks>
		/// <param name="element">The element to test</param>
		/// <returns>Whether to add a shape</returns>
		protected override bool ShouldAddShapeForElement(Microsoft.VisualStudio.Modeling.ModelElement element)
		{
			bool addShape = false;

			// Make a list of all elements mapped from the shape / connector maps
						if (element is ISpySoft.SFSchemaLanguage.DomainModel.Activity) addShape = true;
			if (element is ISpySoft.SFSchemaLanguage.DomainModel.Artifact) addShape = true;
			if (element is ISpySoft.SFSchemaLanguage.DomainModel.Mapping) addShape = true;
			if (element is ISpySoft.SFSchemaLanguage.DomainModel.ViewPoint) addShape = true;
 			if (element is ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem) addShape = true;
			return addShape;
		}
	
		/// <summary>
		/// Override to configure shapes when they are added to the diagram
		/// </summary>
		/// <param name="child"></param>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		protected override void OnChildConfiguring(ShapeElement child)
		{
			base.OnChildConfiguring(child);
			// When a SchemaModelItemHasSchemaModelItemConnector is created, configure it to be connected up to the right 
			// source and target shapes
			SchemaModelItemHasSchemaModelItemConnector schemamodelitemhasschemamodelitemconnector = child as SchemaModelItemHasSchemaModelItemConnector;
			if (schemamodelitemhasschemamodelitemconnector != null && schemamodelitemhasschemamodelitemconnector.ModelElement != null)
			{
				ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem relationship = schemamodelitemhasschemamodelitemconnector.ModelElement as ISpySoft.SFSchemaLanguage.DomainModel.SchemaModelItemHasSchemaModelItem;
				if (relationship != null)
				{
				
					if (schemamodelitemhasschemamodelitemconnector.FromShape == null)
					{
						Shape sourceShape = this.FindShape(relationship.SchemaModelItemSource);
						Shape targetShape = this.FindShape(relationship.SchemaModelItemTarget);
						if (sourceShape != null && targetShape != null)
						{
							schemamodelitemhasschemamodelitemconnector.Connect(sourceShape, targetShape);
						}
					}
				
				}
			}
		}
	
		#endregion

		#region Mouse Actions
		/// <summary>
		/// Override to provide the right mouse action when trying
		/// to create links on the diagram
		/// </summary>
		/// <param name="pointArgs"></param>
		public override void OnViewMouseEnter(DiagramPointEventArgs pointArgs)
		{
			if (pointArgs  == null) throw new ArgumentNullException("pointArgs");
			
			MouseAction action = null;

			if (ActiveDiagramView != null)
			{
				if (ActiveDiagramView.SelectedToolboxItemSupportsFilterString(EditorFactory.SchemaModelItemHasSchemaModelItemConnectorFilterString))
				{
					action = this.SchemaModelItemHasSchemaModelItemConnectorConnectAction;
				}
			}

			if (pointArgs.DiagramClientView.ActiveMouseAction != action)
			{
				pointArgs.DiagramClientView.ActiveMouseAction = action;
			}
		}

		/// <summary>
		/// Gets the SchemaModelItemHasSchemaModelItemConnector connection tool mouse action for this Diagram.
		/// </summary>
		/// <remarks>
		/// This connection tool supports dragging as well as clicking to create a connection.
		/// </remarks>
		private SchemaModelItemHasSchemaModelItemConnectorConnectAction SchemaModelItemHasSchemaModelItemConnectorConnectAction
		{
			get
			{
				if (this.schemamodelitemhasschemamodelitemconnectorConnectAction == null)
				{
					this.schemamodelitemhasschemamodelitemconnectorConnectAction = new SchemaModelItemHasSchemaModelItemConnectorConnectAction(this, true);
					this.schemamodelitemhasschemamodelitemconnectorConnectAction.MouseActionDeactivated += new MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
				}

				return this.schemamodelitemhasschemamodelitemconnectorConnectAction;
			}
		}
		#endregion
	}
}

