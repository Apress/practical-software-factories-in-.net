//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
    
namespace ISpySoft.SFSchemaLanguage.Designer
{
	#region Using directives
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Microsoft.VisualStudio.EnterpriseTools.Shell;
	using Microsoft.VisualStudio.Modeling;
	using Microsoft.VisualStudio.Modeling.Utilities;
	using System.Windows.Forms;
	using Microsoft.VisualStudio.Modeling.Diagrams;
	#endregion

	///<summary>
	///The MouseAction that handles the gesture for creating a Connector.
	///</summary>
	public class SchemaModelItemHasSchemaModelItemConnectorConnectAction : ConnectorConnectAction
	{
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="diagram"></param>
		/// <param name="permitClick"></param>
		public SchemaModelItemHasSchemaModelItemConnectorConnectAction(Microsoft.VisualStudio.Modeling.Diagrams.Diagram diagram, bool permitClick): base(diagram, permitClick )
		{
		}

		/// <summary>
		/// Get the ConnectionType instance associated with this action when the source and target conditions are met
		/// </summary>
		/// <param name="sourceShapeElement"></param>
		/// <param name="targetShapeElement"></param>
		/// <returns></returns>
		protected override ShapeToShapeConnectionType GetConnectionType(ShapeElement sourceShapeElement, ShapeElement targetShapeElement)
		{
			return SchemaModelItemHasSchemaModelItemConnectorConnectionType.Instance;
		}
	}

	/// <summary>
	/// Singleton ConnectionType for creating the Connector between two Shapes.
	/// </summary>
	public partial class SchemaModelItemHasSchemaModelItemConnectorConnectionType : ShapeToShapeConnectionType
	{
		private static SchemaModelItemHasSchemaModelItemConnectorConnectionType instance;

		public SchemaModelItemHasSchemaModelItemConnectorConnectionType() : base()
		{
		}

		/// <summary>
		/// Get the types of shape that are valid as sources
		/// </summary>
		/// <value></value>
		public override IList<Type> SourceShapeTypes
		{
			get
			{
				List<Type> types = new List<Type>();
				types.Add(typeof(ISpySoft.SFSchemaLanguage.Designer.ActivityShape));
				types.Add(typeof(ISpySoft.SFSchemaLanguage.Designer.ViewPointShape));
				types.Add(typeof(ISpySoft.SFSchemaLanguage.Designer.MappingShape));
				 
				return types.AsReadOnly();				 
			}
		}

		/// <summary>
		/// Get the types of shape that are valid as targets
		/// </summary>
		/// <value></value>
		public override IList<Type> TargetShapeTypes
		{
			get
			{
				List<Type> types = new List<Type>();
				types.Add(typeof(ISpySoft.SFSchemaLanguage.Designer.ArtifactShape));
				types.Add(typeof(ISpySoft.SFSchemaLanguage.Designer.ActivityShape));
				types.Add(typeof(ISpySoft.SFSchemaLanguage.Designer.ViewPointShape));
				 
				return types.AsReadOnly();				 
			}
		}
	
		public static new SchemaModelItemHasSchemaModelItemConnectorConnectionType Instance
		{
			get
			{
				if (instance == null)
				{
					instance = new SchemaModelItemHasSchemaModelItemConnectorConnectionType();
				}
				return instance;
			}
		}
	

		/// Return whether the instance is OK to be the source of a link, in its current state.
		/// </summary>
		/// <param name="shape"></param>
		/// <returns></returns>
		public override bool IsValidSourceInstance(ShapeElement shape)
		{
			if (!SourceShapeTypes.Contains(ConnectorConnectAction.TopLevelShape(shape).GetType())) return false;
			return base.IsValidSourceInstance(shape);
		}
		
		/// <summary>
		/// Return whether the instance is OK to be the source of a link, in its current state.
		/// </summary>
		/// <param name="modelElement"></param>
		/// <returns></returns>
		public override bool IsValidSourceInstance(ModelElement element)
		{
				return true;
			}	

		/// <summary>
		/// Whether the instance is OK to be the target of a link, in its current state.
		/// </summary>
		/// <param name="modelElement"></param>
		/// <returns></returns>
		public override bool IsValidTargetInstance(ModelElement element)
		{
		
				return true;
			}

		
		

	}
}
